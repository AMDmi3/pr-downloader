/* soapC.cpp
   Generated by gSOAP 2.7.9l from plasma.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.9l 2010-08-31 23:50:56 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__ResourceType:
		return soap_in_ns1__ResourceType(soap, NULL, NULL, "ns1:ResourceType");
	case SOAP_TYPE_ns1__ReturnValue:
		return soap_in_ns1__ReturnValue(soap, NULL, NULL, "ns1:ReturnValue");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__ArrayOfResourceData:
		return soap_in_ns1__ArrayOfResourceData(soap, NULL, NULL, "ns1:ArrayOfResourceData");
	case SOAP_TYPE_ns1__SpringHashEntry:
		return soap_in_ns1__SpringHashEntry(soap, NULL, NULL, "ns1:SpringHashEntry");
	case SOAP_TYPE_ns1__ArrayOfSpringHashEntry:
		return soap_in_ns1__ArrayOfSpringHashEntry(soap, NULL, NULL, "ns1:ArrayOfSpringHashEntry");
	case SOAP_TYPE_ns1__ResourceData:
		return soap_in_ns1__ResourceData(soap, NULL, NULL, "ns1:ResourceData");
	case SOAP_TYPE_ns1__ArrayOfString:
		return soap_in_ns1__ArrayOfString(soap, NULL, NULL, "ns1:ArrayOfString");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__RegisterResourceResponse:
		return soap_in_PointerTo_ns1__RegisterResourceResponse(soap, NULL, NULL, "ns1:RegisterResourceResponse");
	case SOAP_TYPE_PointerTo_ns1__RegisterResource:
		return soap_in_PointerTo_ns1__RegisterResource(soap, NULL, NULL, "ns1:RegisterResource");
	case SOAP_TYPE_PointerTo_ns1__GetResourceListResponse:
		return soap_in_PointerTo_ns1__GetResourceListResponse(soap, NULL, NULL, "ns1:GetResourceListResponse");
	case SOAP_TYPE_PointerTo_ns1__GetResourceList:
		return soap_in_PointerTo_ns1__GetResourceList(soap, NULL, NULL, "ns1:GetResourceList");
	case SOAP_TYPE_PointerTo_ns1__GetResourceDataResponse:
		return soap_in_PointerTo_ns1__GetResourceDataResponse(soap, NULL, NULL, "ns1:GetResourceDataResponse");
	case SOAP_TYPE_PointerTo_ns1__GetResourceData:
		return soap_in_PointerTo_ns1__GetResourceData(soap, NULL, NULL, "ns1:GetResourceData");
	case SOAP_TYPE_PointerTo_ns1__DownloadFileResponse:
		return soap_in_PointerTo_ns1__DownloadFileResponse(soap, NULL, NULL, "ns1:DownloadFileResponse");
	case SOAP_TYPE_PointerTo_ns1__DownloadFile:
		return soap_in_PointerTo_ns1__DownloadFile(soap, NULL, NULL, "ns1:DownloadFile");
	case SOAP_TYPE_PointerTo_ns1__DeleteResourceResponse:
		return soap_in_PointerTo_ns1__DeleteResourceResponse(soap, NULL, NULL, "ns1:DeleteResourceResponse");
	case SOAP_TYPE_PointerTo_ns1__DeleteResource:
		return soap_in_PointerTo_ns1__DeleteResource(soap, NULL, NULL, "ns1:DeleteResource");
	case SOAP_TYPE_PointerTons1__ArrayOfResourceData:
		return soap_in_PointerTons1__ArrayOfResourceData(soap, NULL, NULL, "ns1:ArrayOfResourceData");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__ResourceData:
		return soap_in_PointerTons1__ResourceData(soap, NULL, NULL, "ns1:ResourceData");
	case SOAP_TYPE_PointerTons1__SpringHashEntry:
		return soap_in_PointerTons1__SpringHashEntry(soap, NULL, NULL, "ns1:SpringHashEntry");
	case SOAP_TYPE_PointerTons1__ArrayOfSpringHashEntry:
		return soap_in_PointerTons1__ArrayOfSpringHashEntry(soap, NULL, NULL, "ns1:ArrayOfSpringHashEntry");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		return soap_in_PointerTons1__ArrayOfString(soap, NULL, NULL, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfResourceData"))
		{	*type = SOAP_TYPE_ns1__ArrayOfResourceData;
			return soap_in_ns1__ArrayOfResourceData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SpringHashEntry"))
		{	*type = SOAP_TYPE_ns1__SpringHashEntry;
			return soap_in_ns1__SpringHashEntry(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfSpringHashEntry"))
		{	*type = SOAP_TYPE_ns1__ArrayOfSpringHashEntry;
			return soap_in_ns1__ArrayOfSpringHashEntry(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ResourceData"))
		{	*type = SOAP_TYPE_ns1__ResourceData;
			return soap_in_ns1__ResourceData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfString"))
		{	*type = SOAP_TYPE_ns1__ArrayOfString;
			return soap_in_ns1__ArrayOfString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ResourceType"))
		{	*type = SOAP_TYPE_ns1__ResourceType;
			return soap_in_ns1__ResourceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReturnValue"))
		{	*type = SOAP_TYPE_ns1__ReturnValue;
			return soap_in_ns1__ReturnValue(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:RegisterResourceResponse"))
		{	*type = SOAP_TYPE__ns1__RegisterResourceResponse;
			return soap_in__ns1__RegisterResourceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RegisterResource"))
		{	*type = SOAP_TYPE__ns1__RegisterResource;
			return soap_in__ns1__RegisterResource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResourceListResponse"))
		{	*type = SOAP_TYPE__ns1__GetResourceListResponse;
			return soap_in__ns1__GetResourceListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResourceList"))
		{	*type = SOAP_TYPE__ns1__GetResourceList;
			return soap_in__ns1__GetResourceList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResourceDataResponse"))
		{	*type = SOAP_TYPE__ns1__GetResourceDataResponse;
			return soap_in__ns1__GetResourceDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResourceData"))
		{	*type = SOAP_TYPE__ns1__GetResourceData;
			return soap_in__ns1__GetResourceData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DownloadFileResponse"))
		{	*type = SOAP_TYPE__ns1__DownloadFileResponse;
			return soap_in__ns1__DownloadFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DownloadFile"))
		{	*type = SOAP_TYPE__ns1__DownloadFile;
			return soap_in__ns1__DownloadFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DeleteResourceResponse"))
		{	*type = SOAP_TYPE__ns1__DeleteResourceResponse;
			return soap_in__ns1__DeleteResourceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DeleteResource"))
		{	*type = SOAP_TYPE__ns1__DeleteResource;
			return soap_in__ns1__DeleteResource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns1__ResourceType:
		return soap_out_ns1__ResourceType(soap, tag, id, (const enum ns1__ResourceType *)ptr, "ns1:ResourceType");
	case SOAP_TYPE_ns1__ReturnValue:
		return soap_out_ns1__ReturnValue(soap, tag, id, (const enum ns1__ReturnValue *)ptr, "ns1:ReturnValue");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__RegisterResourceResponse:
		return ((_ns1__RegisterResourceResponse *)ptr)->soap_out(soap, "ns1:RegisterResourceResponse", id, NULL);
	case SOAP_TYPE__ns1__RegisterResource:
		return ((_ns1__RegisterResource *)ptr)->soap_out(soap, "ns1:RegisterResource", id, NULL);
	case SOAP_TYPE__ns1__GetResourceListResponse:
		return ((_ns1__GetResourceListResponse *)ptr)->soap_out(soap, "ns1:GetResourceListResponse", id, NULL);
	case SOAP_TYPE__ns1__GetResourceList:
		return ((_ns1__GetResourceList *)ptr)->soap_out(soap, "ns1:GetResourceList", id, NULL);
	case SOAP_TYPE__ns1__GetResourceDataResponse:
		return ((_ns1__GetResourceDataResponse *)ptr)->soap_out(soap, "ns1:GetResourceDataResponse", id, NULL);
	case SOAP_TYPE__ns1__GetResourceData:
		return ((_ns1__GetResourceData *)ptr)->soap_out(soap, "ns1:GetResourceData", id, NULL);
	case SOAP_TYPE__ns1__DownloadFileResponse:
		return ((_ns1__DownloadFileResponse *)ptr)->soap_out(soap, "ns1:DownloadFileResponse", id, NULL);
	case SOAP_TYPE__ns1__DownloadFile:
		return ((_ns1__DownloadFile *)ptr)->soap_out(soap, "ns1:DownloadFile", id, NULL);
	case SOAP_TYPE__ns1__DeleteResourceResponse:
		return ((_ns1__DeleteResourceResponse *)ptr)->soap_out(soap, "ns1:DeleteResourceResponse", id, NULL);
	case SOAP_TYPE__ns1__DeleteResource:
		return ((_ns1__DeleteResource *)ptr)->soap_out(soap, "ns1:DeleteResource", id, NULL);
	case SOAP_TYPE_ns1__ArrayOfResourceData:
		return ((ns1__ArrayOfResourceData *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfResourceData");
	case SOAP_TYPE_ns1__SpringHashEntry:
		return ((ns1__SpringHashEntry *)ptr)->soap_out(soap, tag, id, "ns1:SpringHashEntry");
	case SOAP_TYPE_ns1__ArrayOfSpringHashEntry:
		return ((ns1__ArrayOfSpringHashEntry *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfSpringHashEntry");
	case SOAP_TYPE_ns1__ResourceData:
		return ((ns1__ResourceData *)ptr)->soap_out(soap, tag, id, "ns1:ResourceData");
	case SOAP_TYPE_ns1__ArrayOfString:
		return ((ns1__ArrayOfString *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfString");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__RegisterResourceResponse:
		return soap_out_PointerTo_ns1__RegisterResourceResponse(soap, tag, id, (_ns1__RegisterResourceResponse *const*)ptr, "ns1:RegisterResourceResponse");
	case SOAP_TYPE_PointerTo_ns1__RegisterResource:
		return soap_out_PointerTo_ns1__RegisterResource(soap, tag, id, (_ns1__RegisterResource *const*)ptr, "ns1:RegisterResource");
	case SOAP_TYPE_PointerTo_ns1__GetResourceListResponse:
		return soap_out_PointerTo_ns1__GetResourceListResponse(soap, tag, id, (_ns1__GetResourceListResponse *const*)ptr, "ns1:GetResourceListResponse");
	case SOAP_TYPE_PointerTo_ns1__GetResourceList:
		return soap_out_PointerTo_ns1__GetResourceList(soap, tag, id, (_ns1__GetResourceList *const*)ptr, "ns1:GetResourceList");
	case SOAP_TYPE_PointerTo_ns1__GetResourceDataResponse:
		return soap_out_PointerTo_ns1__GetResourceDataResponse(soap, tag, id, (_ns1__GetResourceDataResponse *const*)ptr, "ns1:GetResourceDataResponse");
	case SOAP_TYPE_PointerTo_ns1__GetResourceData:
		return soap_out_PointerTo_ns1__GetResourceData(soap, tag, id, (_ns1__GetResourceData *const*)ptr, "ns1:GetResourceData");
	case SOAP_TYPE_PointerTo_ns1__DownloadFileResponse:
		return soap_out_PointerTo_ns1__DownloadFileResponse(soap, tag, id, (_ns1__DownloadFileResponse *const*)ptr, "ns1:DownloadFileResponse");
	case SOAP_TYPE_PointerTo_ns1__DownloadFile:
		return soap_out_PointerTo_ns1__DownloadFile(soap, tag, id, (_ns1__DownloadFile *const*)ptr, "ns1:DownloadFile");
	case SOAP_TYPE_PointerTo_ns1__DeleteResourceResponse:
		return soap_out_PointerTo_ns1__DeleteResourceResponse(soap, tag, id, (_ns1__DeleteResourceResponse *const*)ptr, "ns1:DeleteResourceResponse");
	case SOAP_TYPE_PointerTo_ns1__DeleteResource:
		return soap_out_PointerTo_ns1__DeleteResource(soap, tag, id, (_ns1__DeleteResource *const*)ptr, "ns1:DeleteResource");
	case SOAP_TYPE_PointerTons1__ArrayOfResourceData:
		return soap_out_PointerTons1__ArrayOfResourceData(soap, tag, id, (ns1__ArrayOfResourceData *const*)ptr, "ns1:ArrayOfResourceData");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__ResourceData:
		return soap_out_PointerTons1__ResourceData(soap, tag, id, (ns1__ResourceData *const*)ptr, "ns1:ResourceData");
	case SOAP_TYPE_PointerTons1__SpringHashEntry:
		return soap_out_PointerTons1__SpringHashEntry(soap, tag, id, (ns1__SpringHashEntry *const*)ptr, "ns1:SpringHashEntry");
	case SOAP_TYPE_PointerTons1__ArrayOfSpringHashEntry:
		return soap_out_PointerTons1__ArrayOfSpringHashEntry(soap, tag, id, (ns1__ArrayOfSpringHashEntry *const*)ptr, "ns1:ArrayOfSpringHashEntry");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		return soap_out_PointerTons1__ArrayOfString(soap, tag, id, (ns1__ArrayOfString *const*)ptr, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__RegisterResourceResponse:
		((_ns1__RegisterResourceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RegisterResource:
		((_ns1__RegisterResource *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResourceListResponse:
		((_ns1__GetResourceListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResourceList:
		((_ns1__GetResourceList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResourceDataResponse:
		((_ns1__GetResourceDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetResourceData:
		((_ns1__GetResourceData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DownloadFileResponse:
		((_ns1__DownloadFileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DownloadFile:
		((_ns1__DownloadFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DeleteResourceResponse:
		((_ns1__DeleteResourceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DeleteResource:
		((_ns1__DeleteResource *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfResourceData:
		((ns1__ArrayOfResourceData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__SpringHashEntry:
		((ns1__SpringHashEntry *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfSpringHashEntry:
		((ns1__ArrayOfSpringHashEntry *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ResourceData:
		((ns1__ResourceData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfString:
		((ns1__ArrayOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns3__RegisterResource:
		soap_serialize___ns3__RegisterResource(soap, (const struct __ns3__RegisterResource *)ptr);
		break;
	case SOAP_TYPE___ns3__GetResourceList:
		soap_serialize___ns3__GetResourceList(soap, (const struct __ns3__GetResourceList *)ptr);
		break;
	case SOAP_TYPE___ns3__GetResourceData:
		soap_serialize___ns3__GetResourceData(soap, (const struct __ns3__GetResourceData *)ptr);
		break;
	case SOAP_TYPE___ns3__DownloadFile:
		soap_serialize___ns3__DownloadFile(soap, (const struct __ns3__DownloadFile *)ptr);
		break;
	case SOAP_TYPE___ns3__DeleteResource:
		soap_serialize___ns3__DeleteResource(soap, (const struct __ns3__DeleteResource *)ptr);
		break;
	case SOAP_TYPE___ns2__RegisterResource:
		soap_serialize___ns2__RegisterResource(soap, (const struct __ns2__RegisterResource *)ptr);
		break;
	case SOAP_TYPE___ns2__GetResourceList:
		soap_serialize___ns2__GetResourceList(soap, (const struct __ns2__GetResourceList *)ptr);
		break;
	case SOAP_TYPE___ns2__GetResourceData:
		soap_serialize___ns2__GetResourceData(soap, (const struct __ns2__GetResourceData *)ptr);
		break;
	case SOAP_TYPE___ns2__DownloadFile:
		soap_serialize___ns2__DownloadFile(soap, (const struct __ns2__DownloadFile *)ptr);
		break;
	case SOAP_TYPE___ns2__DeleteResource:
		soap_serialize___ns2__DeleteResource(soap, (const struct __ns2__DeleteResource *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__RegisterResourceResponse:
		soap_serialize_PointerTo_ns1__RegisterResourceResponse(soap, (_ns1__RegisterResourceResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__RegisterResource:
		soap_serialize_PointerTo_ns1__RegisterResource(soap, (_ns1__RegisterResource *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetResourceListResponse:
		soap_serialize_PointerTo_ns1__GetResourceListResponse(soap, (_ns1__GetResourceListResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetResourceList:
		soap_serialize_PointerTo_ns1__GetResourceList(soap, (_ns1__GetResourceList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetResourceDataResponse:
		soap_serialize_PointerTo_ns1__GetResourceDataResponse(soap, (_ns1__GetResourceDataResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetResourceData:
		soap_serialize_PointerTo_ns1__GetResourceData(soap, (_ns1__GetResourceData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DownloadFileResponse:
		soap_serialize_PointerTo_ns1__DownloadFileResponse(soap, (_ns1__DownloadFileResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DownloadFile:
		soap_serialize_PointerTo_ns1__DownloadFile(soap, (_ns1__DownloadFile *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DeleteResourceResponse:
		soap_serialize_PointerTo_ns1__DeleteResourceResponse(soap, (_ns1__DeleteResourceResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DeleteResource:
		soap_serialize_PointerTo_ns1__DeleteResource(soap, (_ns1__DeleteResource *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfResourceData:
		soap_serialize_PointerTons1__ArrayOfResourceData(soap, (ns1__ArrayOfResourceData *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ResourceData:
		soap_serialize_PointerTons1__ResourceData(soap, (ns1__ResourceData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__SpringHashEntry:
		soap_serialize_PointerTons1__SpringHashEntry(soap, (ns1__SpringHashEntry *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfSpringHashEntry:
		soap_serialize_PointerTons1__ArrayOfSpringHashEntry(soap, (ns1__ArrayOfSpringHashEntry *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		soap_serialize_PointerTons1__ArrayOfString(soap, (ns1__ArrayOfString *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfString:
		return (void*)soap_instantiate_ns1__ArrayOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ResourceData:
		return (void*)soap_instantiate_ns1__ResourceData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfSpringHashEntry:
		return (void*)soap_instantiate_ns1__ArrayOfSpringHashEntry(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SpringHashEntry:
		return (void*)soap_instantiate_ns1__SpringHashEntry(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfResourceData:
		return (void*)soap_instantiate_ns1__ArrayOfResourceData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DeleteResource:
		return (void*)soap_instantiate__ns1__DeleteResource(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DeleteResourceResponse:
		return (void*)soap_instantiate__ns1__DeleteResourceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DownloadFile:
		return (void*)soap_instantiate__ns1__DownloadFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DownloadFileResponse:
		return (void*)soap_instantiate__ns1__DownloadFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResourceData:
		return (void*)soap_instantiate__ns1__GetResourceData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResourceDataResponse:
		return (void*)soap_instantiate__ns1__GetResourceDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResourceList:
		return (void*)soap_instantiate__ns1__GetResourceList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetResourceListResponse:
		return (void*)soap_instantiate__ns1__GetResourceListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RegisterResource:
		return (void*)soap_instantiate__ns1__RegisterResource(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RegisterResourceResponse:
		return (void*)soap_instantiate__ns1__RegisterResourceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__DeleteResource:
		return (void*)soap_instantiate___ns2__DeleteResource(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__DownloadFile:
		return (void*)soap_instantiate___ns2__DownloadFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetResourceData:
		return (void*)soap_instantiate___ns2__GetResourceData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetResourceList:
		return (void*)soap_instantiate___ns2__GetResourceList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__RegisterResource:
		return (void*)soap_instantiate___ns2__RegisterResource(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__DeleteResource:
		return (void*)soap_instantiate___ns3__DeleteResource(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__DownloadFile:
		return (void*)soap_instantiate___ns3__DownloadFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetResourceData:
		return (void*)soap_instantiate___ns3__GetResourceData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetResourceList:
		return (void*)soap_instantiate___ns3__GetResourceList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__RegisterResource:
		return (void*)soap_instantiate___ns3__RegisterResource(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ResourceData:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ResourceData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__SpringHashEntry:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__SpringHashEntry(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			delete (xsd__base64Binary*)p->ptr;
		else
			delete[] (xsd__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfString:
		if (p->size < 0)
			delete (ns1__ArrayOfString*)p->ptr;
		else
			delete[] (ns1__ArrayOfString*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ResourceData:
		if (p->size < 0)
			delete (ns1__ResourceData*)p->ptr;
		else
			delete[] (ns1__ResourceData*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfSpringHashEntry:
		if (p->size < 0)
			delete (ns1__ArrayOfSpringHashEntry*)p->ptr;
		else
			delete[] (ns1__ArrayOfSpringHashEntry*)p->ptr;
		break;
	case SOAP_TYPE_ns1__SpringHashEntry:
		if (p->size < 0)
			delete (ns1__SpringHashEntry*)p->ptr;
		else
			delete[] (ns1__SpringHashEntry*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfResourceData:
		if (p->size < 0)
			delete (ns1__ArrayOfResourceData*)p->ptr;
		else
			delete[] (ns1__ArrayOfResourceData*)p->ptr;
		break;
	case SOAP_TYPE__ns1__DeleteResource:
		if (p->size < 0)
			delete (_ns1__DeleteResource*)p->ptr;
		else
			delete[] (_ns1__DeleteResource*)p->ptr;
		break;
	case SOAP_TYPE__ns1__DeleteResourceResponse:
		if (p->size < 0)
			delete (_ns1__DeleteResourceResponse*)p->ptr;
		else
			delete[] (_ns1__DeleteResourceResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__DownloadFile:
		if (p->size < 0)
			delete (_ns1__DownloadFile*)p->ptr;
		else
			delete[] (_ns1__DownloadFile*)p->ptr;
		break;
	case SOAP_TYPE__ns1__DownloadFileResponse:
		if (p->size < 0)
			delete (_ns1__DownloadFileResponse*)p->ptr;
		else
			delete[] (_ns1__DownloadFileResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetResourceData:
		if (p->size < 0)
			delete (_ns1__GetResourceData*)p->ptr;
		else
			delete[] (_ns1__GetResourceData*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetResourceDataResponse:
		if (p->size < 0)
			delete (_ns1__GetResourceDataResponse*)p->ptr;
		else
			delete[] (_ns1__GetResourceDataResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetResourceList:
		if (p->size < 0)
			delete (_ns1__GetResourceList*)p->ptr;
		else
			delete[] (_ns1__GetResourceList*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetResourceListResponse:
		if (p->size < 0)
			delete (_ns1__GetResourceListResponse*)p->ptr;
		else
			delete[] (_ns1__GetResourceListResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__RegisterResource:
		if (p->size < 0)
			delete (_ns1__RegisterResource*)p->ptr;
		else
			delete[] (_ns1__RegisterResource*)p->ptr;
		break;
	case SOAP_TYPE__ns1__RegisterResourceResponse:
		if (p->size < 0)
			delete (_ns1__RegisterResourceResponse*)p->ptr;
		else
			delete[] (_ns1__RegisterResourceResponse*)p->ptr;
		break;
	case SOAP_TYPE___ns2__DeleteResource:
		if (p->size < 0)
			delete (struct __ns2__DeleteResource*)p->ptr;
		else
			delete[] (struct __ns2__DeleteResource*)p->ptr;
		break;
	case SOAP_TYPE___ns2__DownloadFile:
		if (p->size < 0)
			delete (struct __ns2__DownloadFile*)p->ptr;
		else
			delete[] (struct __ns2__DownloadFile*)p->ptr;
		break;
	case SOAP_TYPE___ns2__GetResourceData:
		if (p->size < 0)
			delete (struct __ns2__GetResourceData*)p->ptr;
		else
			delete[] (struct __ns2__GetResourceData*)p->ptr;
		break;
	case SOAP_TYPE___ns2__GetResourceList:
		if (p->size < 0)
			delete (struct __ns2__GetResourceList*)p->ptr;
		else
			delete[] (struct __ns2__GetResourceList*)p->ptr;
		break;
	case SOAP_TYPE___ns2__RegisterResource:
		if (p->size < 0)
			delete (struct __ns2__RegisterResource*)p->ptr;
		else
			delete[] (struct __ns2__RegisterResource*)p->ptr;
		break;
	case SOAP_TYPE___ns3__DeleteResource:
		if (p->size < 0)
			delete (struct __ns3__DeleteResource*)p->ptr;
		else
			delete[] (struct __ns3__DeleteResource*)p->ptr;
		break;
	case SOAP_TYPE___ns3__DownloadFile:
		if (p->size < 0)
			delete (struct __ns3__DownloadFile*)p->ptr;
		else
			delete[] (struct __ns3__DownloadFile*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetResourceData:
		if (p->size < 0)
			delete (struct __ns3__GetResourceData*)p->ptr;
		else
			delete[] (struct __ns3__GetResourceData*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetResourceList:
		if (p->size < 0)
			delete (struct __ns3__GetResourceList*)p->ptr;
		else
			delete[] (struct __ns3__GetResourceList*)p->ptr;
		break;
	case SOAP_TYPE___ns3__RegisterResource:
		if (p->size < 0)
			delete (struct __ns3__RegisterResource*)p->ptr;
		else
			delete[] (struct __ns3__RegisterResource*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ResourceData:
		if (p->size < 0)
			delete (std::vector<ns1__ResourceData * >*)p->ptr;
		else
			delete[] (std::vector<ns1__ResourceData * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__SpringHashEntry:
		if (p->size < 0)
			delete (std::vector<ns1__SpringHashEntry * >*)p->ptr;
		else
			delete[] (std::vector<ns1__SpringHashEntry * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			delete (std::vector<std::string >*)p->ptr;
		else
			delete[] (std::vector<std::string >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ResourceData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ResourceData * >*)p)[len] = *(ns1__ResourceData **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__SpringHashEntry:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__SpringHashEntry * >*)p)[len] = *(ns1__SpringHashEntry **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ResourceType(struct soap *soap, enum ns1__ResourceType *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__ResourceType
	*a = SOAP_DEFAULT_ns1__ResourceType;
#else
	*a = (enum ns1__ResourceType)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ResourceType(struct soap *soap, const enum ns1__ResourceType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__ResourceType);
	if (soap_out_ns1__ResourceType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_ns1__ResourceType[] =
{	{ (long)ns1__ResourceType__Map, "Map" },
	{ (long)ns1__ResourceType__Mod, "Mod" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__ResourceType2s(struct soap *soap, enum ns1__ResourceType n)
{	const char *s = soap_code_str(soap_codes_ns1__ResourceType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ResourceType(struct soap *soap, const char *tag, int id, const enum ns1__ResourceType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ResourceType), type) || soap_send(soap, soap_ns1__ResourceType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum ns1__ResourceType * SOAP_FMAC4 soap_get_ns1__ResourceType(struct soap *soap, enum ns1__ResourceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ResourceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__ResourceType(struct soap *soap, const char *s, enum ns1__ResourceType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_ns1__ResourceType, s);
	if (map)
		*a = (enum ns1__ResourceType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns1__ResourceType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns1__ResourceType * SOAP_FMAC4 soap_in_ns1__ResourceType(struct soap *soap, const char *tag, enum ns1__ResourceType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns1__ResourceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ResourceType, sizeof(enum ns1__ResourceType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns1__ResourceType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns1__ResourceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ResourceType, 0, sizeof(enum ns1__ResourceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ReturnValue(struct soap *soap, enum ns1__ReturnValue *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__ReturnValue
	*a = SOAP_DEFAULT_ns1__ReturnValue;
#else
	*a = (enum ns1__ReturnValue)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ReturnValue(struct soap *soap, const enum ns1__ReturnValue *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__ReturnValue);
	if (soap_out_ns1__ReturnValue(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_ns1__ReturnValue[] =
{	{ (long)ns1__ReturnValue__Ok, "Ok" },
	{ (long)ns1__ReturnValue__InvalidLogin, "InvalidLogin" },
	{ (long)ns1__ReturnValue__ResourceNotFound, "ResourceNotFound" },
	{ (long)ns1__ReturnValue__InternalNameAlreadyExistsWithDifferentSpringHash, "InternalNameAlreadyExistsWithDifferentSpringHash" },
	{ (long)ns1__ReturnValue__Md5AlreadyExists, "Md5AlreadyExists" },
	{ (long)ns1__ReturnValue__Md5AlreadyExistsWithDifferentName, "Md5AlreadyExistsWithDifferentName" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__ReturnValue2s(struct soap *soap, enum ns1__ReturnValue n)
{	const char *s = soap_code_str(soap_codes_ns1__ReturnValue, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReturnValue(struct soap *soap, const char *tag, int id, const enum ns1__ReturnValue *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ReturnValue), type) || soap_send(soap, soap_ns1__ReturnValue2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum ns1__ReturnValue * SOAP_FMAC4 soap_get_ns1__ReturnValue(struct soap *soap, enum ns1__ReturnValue *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ReturnValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__ReturnValue(struct soap *soap, const char *s, enum ns1__ReturnValue *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_ns1__ReturnValue, s);
	if (map)
		*a = (enum ns1__ReturnValue)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 5)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns1__ReturnValue)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns1__ReturnValue * SOAP_FMAC4 soap_in_ns1__ReturnValue(struct soap *soap, const char *tag, enum ns1__ReturnValue *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns1__ReturnValue *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ReturnValue, sizeof(enum ns1__ReturnValue), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns1__ReturnValue(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns1__ReturnValue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ReturnValue, 0, sizeof(enum ns1__ReturnValue), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__RegisterResourceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns1__ReturnValue(soap, &this->_ns1__RegisterResourceResponse::RegisterResourceResult);
	/* transient soap skipped */
}

void _ns1__RegisterResourceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__RegisterResourceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__RegisterResourceResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__RegisterResourceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RegisterResourceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RegisterResourceResponse(struct soap *soap, const char *tag, int id, const _ns1__RegisterResourceResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RegisterResourceResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:RegisterResourceResult");
	if (soap_out_ns1__ReturnValue(soap, "ns1:RegisterResourceResult", -1, &(a->_ns1__RegisterResourceResponse::RegisterResourceResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__RegisterResourceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RegisterResourceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RegisterResourceResponse * SOAP_FMAC4 soap_get__ns1__RegisterResourceResponse(struct soap *soap, _ns1__RegisterResourceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RegisterResourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__RegisterResourceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RegisterResourceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RegisterResourceResponse * SOAP_FMAC4 soap_in__ns1__RegisterResourceResponse(struct soap *soap, const char *tag, _ns1__RegisterResourceResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RegisterResourceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RegisterResourceResponse, sizeof(_ns1__RegisterResourceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__RegisterResourceResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__RegisterResourceResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_RegisterResourceResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RegisterResourceResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__ReturnValue(soap, "ns1:RegisterResourceResult", &(a->_ns1__RegisterResourceResponse::RegisterResourceResult), "ns1:ReturnValue"))
				{	soap_flag_RegisterResourceResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:RegisterResourceResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RegisterResourceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RegisterResourceResponse, 0, sizeof(_ns1__RegisterResourceResponse), 0, soap_copy__ns1__RegisterResourceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RegisterResourceResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__RegisterResourceResponse * SOAP_FMAC6 soap_new__ns1__RegisterResourceResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__RegisterResourceResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__RegisterResourceResponse(struct soap *soap, _ns1__RegisterResourceResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__RegisterResourceResponse * SOAP_FMAC4 soap_instantiate__ns1__RegisterResourceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RegisterResourceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__RegisterResourceResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__RegisterResourceResponse;
		if (size)
			*size = sizeof(_ns1__RegisterResourceResponse);
		((_ns1__RegisterResourceResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__RegisterResourceResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__RegisterResourceResponse);
		for (int i = 0; i < n; i++)
			((_ns1__RegisterResourceResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__RegisterResourceResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RegisterResourceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__RegisterResourceResponse %p -> %p\n", q, p));
	*(_ns1__RegisterResourceResponse*)p = *(_ns1__RegisterResourceResponse*)q;
}

void _ns1__RegisterResource::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__RegisterResource::apiVersion);
	this->_ns1__RegisterResource::springVersion = NULL;
	this->_ns1__RegisterResource::md5 = NULL;
	soap_default_int(soap, &this->_ns1__RegisterResource::length);
	soap_default_ns1__ResourceType(soap, &this->_ns1__RegisterResource::resourceType);
	this->_ns1__RegisterResource::archiveName = NULL;
	this->_ns1__RegisterResource::internalName = NULL;
	soap_default_int(soap, &this->_ns1__RegisterResource::springHash);
	this->_ns1__RegisterResource::serializedData = NULL;
	this->_ns1__RegisterResource::dependencies = NULL;
	this->_ns1__RegisterResource::minimap = NULL;
	this->_ns1__RegisterResource::metalMap = NULL;
	this->_ns1__RegisterResource::heightMap = NULL;
	this->_ns1__RegisterResource::torrentData = NULL;
	/* transient soap skipped */
}

void _ns1__RegisterResource::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__RegisterResource::springVersion);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__RegisterResource::md5);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__RegisterResource::archiveName);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__RegisterResource::internalName);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__RegisterResource::serializedData);
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__RegisterResource::dependencies);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__RegisterResource::minimap);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__RegisterResource::metalMap);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__RegisterResource::heightMap);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__RegisterResource::torrentData);
	/* transient soap skipped */
}

int _ns1__RegisterResource::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__RegisterResource);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__RegisterResource::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RegisterResource(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RegisterResource(struct soap *soap, const char *tag, int id, const _ns1__RegisterResource *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RegisterResource), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:apiVersion", -1, &(a->_ns1__RegisterResource::apiVersion), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:springVersion", -1, &(a->_ns1__RegisterResource::springVersion), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:md5", -1, &(a->_ns1__RegisterResource::md5), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:length", -1, &(a->_ns1__RegisterResource::length), ""))
		return soap->error;
	if (soap_out_ns1__ResourceType(soap, "ns1:resourceType", -1, &(a->_ns1__RegisterResource::resourceType), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:archiveName", -1, &(a->_ns1__RegisterResource::archiveName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:internalName", -1, &(a->_ns1__RegisterResource::internalName), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:springHash", -1, &(a->_ns1__RegisterResource::springHash), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:serializedData", -1, &(a->_ns1__RegisterResource::serializedData), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:dependencies", -1, &(a->_ns1__RegisterResource::dependencies), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:minimap", -1, &(a->_ns1__RegisterResource::minimap), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:metalMap", -1, &(a->_ns1__RegisterResource::metalMap), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:heightMap", -1, &(a->_ns1__RegisterResource::heightMap), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:torrentData", -1, &(a->_ns1__RegisterResource::torrentData), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__RegisterResource::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RegisterResource(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RegisterResource * SOAP_FMAC4 soap_get__ns1__RegisterResource(struct soap *soap, _ns1__RegisterResource *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RegisterResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__RegisterResource::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RegisterResource(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RegisterResource * SOAP_FMAC4 soap_in__ns1__RegisterResource(struct soap *soap, const char *tag, _ns1__RegisterResource *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RegisterResource *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RegisterResource, sizeof(_ns1__RegisterResource), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__RegisterResource)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__RegisterResource *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_apiVersion1 = 1, soap_flag_springVersion1 = 1, soap_flag_md51 = 1, soap_flag_length1 = 1, soap_flag_resourceType1 = 1, soap_flag_archiveName1 = 1, soap_flag_internalName1 = 1, soap_flag_springHash1 = 1, soap_flag_serializedData1 = 1, soap_flag_dependencies1 = 1, soap_flag_minimap1 = 1, soap_flag_metalMap1 = 1, soap_flag_heightMap1 = 1, soap_flag_torrentData1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_apiVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:apiVersion", &(a->_ns1__RegisterResource::apiVersion), "xsd:int"))
				{	soap_flag_apiVersion1--;
					continue;
				}
			if (soap_flag_springVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:springVersion", &(a->_ns1__RegisterResource::springVersion), "xsd:string"))
				{	soap_flag_springVersion1--;
					continue;
				}
			if (soap_flag_md51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:md5", &(a->_ns1__RegisterResource::md5), "xsd:string"))
				{	soap_flag_md51--;
					continue;
				}
			if (soap_flag_length1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:length", &(a->_ns1__RegisterResource::length), "xsd:int"))
				{	soap_flag_length1--;
					continue;
				}
			if (soap_flag_resourceType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__ResourceType(soap, "ns1:resourceType", &(a->_ns1__RegisterResource::resourceType), "ns1:ResourceType"))
				{	soap_flag_resourceType1--;
					continue;
				}
			if (soap_flag_archiveName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:archiveName", &(a->_ns1__RegisterResource::archiveName), "xsd:string"))
				{	soap_flag_archiveName1--;
					continue;
				}
			if (soap_flag_internalName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:internalName", &(a->_ns1__RegisterResource::internalName), "xsd:string"))
				{	soap_flag_internalName1--;
					continue;
				}
			if (soap_flag_springHash1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:springHash", &(a->_ns1__RegisterResource::springHash), "xsd:int"))
				{	soap_flag_springHash1--;
					continue;
				}
			if (soap_flag_serializedData1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:serializedData", &(a->_ns1__RegisterResource::serializedData), "xsd:base64Binary"))
				{	soap_flag_serializedData1--;
					continue;
				}
			if (soap_flag_dependencies1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:dependencies", &(a->_ns1__RegisterResource::dependencies), "ns1:ArrayOfString"))
				{	soap_flag_dependencies1--;
					continue;
				}
			if (soap_flag_minimap1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:minimap", &(a->_ns1__RegisterResource::minimap), "xsd:base64Binary"))
				{	soap_flag_minimap1--;
					continue;
				}
			if (soap_flag_metalMap1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:metalMap", &(a->_ns1__RegisterResource::metalMap), "xsd:base64Binary"))
				{	soap_flag_metalMap1--;
					continue;
				}
			if (soap_flag_heightMap1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:heightMap", &(a->_ns1__RegisterResource::heightMap), "xsd:base64Binary"))
				{	soap_flag_heightMap1--;
					continue;
				}
			if (soap_flag_torrentData1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:torrentData", &(a->_ns1__RegisterResource::torrentData), "xsd:base64Binary"))
				{	soap_flag_torrentData1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RegisterResource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RegisterResource, 0, sizeof(_ns1__RegisterResource), 0, soap_copy__ns1__RegisterResource);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_apiVersion1 > 0 || soap_flag_length1 > 0 || soap_flag_resourceType1 > 0 || soap_flag_springHash1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__RegisterResource * SOAP_FMAC6 soap_new__ns1__RegisterResource(struct soap *soap, int n)
{	return soap_instantiate__ns1__RegisterResource(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__RegisterResource(struct soap *soap, _ns1__RegisterResource *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__RegisterResource * SOAP_FMAC4 soap_instantiate__ns1__RegisterResource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RegisterResource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__RegisterResource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__RegisterResource;
		if (size)
			*size = sizeof(_ns1__RegisterResource);
		((_ns1__RegisterResource*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__RegisterResource[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__RegisterResource);
		for (int i = 0; i < n; i++)
			((_ns1__RegisterResource*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__RegisterResource*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RegisterResource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__RegisterResource %p -> %p\n", q, p));
	*(_ns1__RegisterResource*)p = *(_ns1__RegisterResource*)q;
}

void _ns1__GetResourceListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResourceListResponse::GetResourceListResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetResourceListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfResourceData(soap, &this->_ns1__GetResourceListResponse::GetResourceListResult);
	/* transient soap skipped */
}

int _ns1__GetResourceListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetResourceListResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetResourceListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResourceListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResourceListResponse(struct soap *soap, const char *tag, int id, const _ns1__GetResourceListResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResourceListResponse), type))
		return soap->error;
	if (a->GetResourceListResult)
		soap_element_result(soap, "ns1:GetResourceListResult");
	if (soap_out_PointerTons1__ArrayOfResourceData(soap, "ns1:GetResourceListResult", -1, &(a->_ns1__GetResourceListResponse::GetResourceListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResourceListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResourceListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResourceListResponse * SOAP_FMAC4 soap_get__ns1__GetResourceListResponse(struct soap *soap, _ns1__GetResourceListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResourceListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetResourceListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResourceListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResourceListResponse * SOAP_FMAC4 soap_in__ns1__GetResourceListResponse(struct soap *soap, const char *tag, _ns1__GetResourceListResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResourceListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResourceListResponse, sizeof(_ns1__GetResourceListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResourceListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResourceListResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetResourceListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetResourceListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfResourceData(soap, "ns1:GetResourceListResult", &(a->_ns1__GetResourceListResponse::GetResourceListResult), "ns1:ArrayOfResourceData"))
				{	soap_flag_GetResourceListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetResourceListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResourceListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResourceListResponse, 0, sizeof(_ns1__GetResourceListResponse), 0, soap_copy__ns1__GetResourceListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetResourceListResponse * SOAP_FMAC6 soap_new__ns1__GetResourceListResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetResourceListResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetResourceListResponse(struct soap *soap, _ns1__GetResourceListResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetResourceListResponse * SOAP_FMAC4 soap_instantiate__ns1__GetResourceListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResourceListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResourceListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetResourceListResponse;
		if (size)
			*size = sizeof(_ns1__GetResourceListResponse);
		((_ns1__GetResourceListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetResourceListResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetResourceListResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetResourceListResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetResourceListResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResourceListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResourceListResponse %p -> %p\n", q, p));
	*(_ns1__GetResourceListResponse*)p = *(_ns1__GetResourceListResponse*)q;
}

void _ns1__GetResourceList::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetResourceList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetResourceList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetResourceList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetResourceList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResourceList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResourceList(struct soap *soap, const char *tag, int id, const _ns1__GetResourceList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResourceList), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResourceList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResourceList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResourceList * SOAP_FMAC4 soap_get__ns1__GetResourceList(struct soap *soap, _ns1__GetResourceList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResourceList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetResourceList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResourceList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResourceList * SOAP_FMAC4 soap_in__ns1__GetResourceList(struct soap *soap, const char *tag, _ns1__GetResourceList *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResourceList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResourceList, sizeof(_ns1__GetResourceList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResourceList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResourceList *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResourceList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResourceList, 0, sizeof(_ns1__GetResourceList), 0, soap_copy__ns1__GetResourceList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetResourceList * SOAP_FMAC6 soap_new__ns1__GetResourceList(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetResourceList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetResourceList(struct soap *soap, _ns1__GetResourceList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetResourceList * SOAP_FMAC4 soap_instantiate__ns1__GetResourceList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResourceList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResourceList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetResourceList;
		if (size)
			*size = sizeof(_ns1__GetResourceList);
		((_ns1__GetResourceList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetResourceList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetResourceList);
		for (int i = 0; i < n; i++)
			((_ns1__GetResourceList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetResourceList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResourceList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResourceList %p -> %p\n", q, p));
	*(_ns1__GetResourceList*)p = *(_ns1__GetResourceList*)q;
}

void _ns1__GetResourceDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResourceDataResponse::GetResourceDataResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetResourceDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ResourceData(soap, &this->_ns1__GetResourceDataResponse::GetResourceDataResult);
	/* transient soap skipped */
}

int _ns1__GetResourceDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetResourceDataResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetResourceDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResourceDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResourceDataResponse(struct soap *soap, const char *tag, int id, const _ns1__GetResourceDataResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResourceDataResponse), type))
		return soap->error;
	if (a->GetResourceDataResult)
		soap_element_result(soap, "ns1:GetResourceDataResult");
	if (soap_out_PointerTons1__ResourceData(soap, "ns1:GetResourceDataResult", -1, &(a->_ns1__GetResourceDataResponse::GetResourceDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResourceDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResourceDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResourceDataResponse * SOAP_FMAC4 soap_get__ns1__GetResourceDataResponse(struct soap *soap, _ns1__GetResourceDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResourceDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetResourceDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResourceDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResourceDataResponse * SOAP_FMAC4 soap_in__ns1__GetResourceDataResponse(struct soap *soap, const char *tag, _ns1__GetResourceDataResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResourceDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResourceDataResponse, sizeof(_ns1__GetResourceDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResourceDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResourceDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetResourceDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetResourceDataResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ResourceData(soap, "ns1:GetResourceDataResult", &(a->_ns1__GetResourceDataResponse::GetResourceDataResult), "ns1:ResourceData"))
				{	soap_flag_GetResourceDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetResourceDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResourceDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResourceDataResponse, 0, sizeof(_ns1__GetResourceDataResponse), 0, soap_copy__ns1__GetResourceDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetResourceDataResponse * SOAP_FMAC6 soap_new__ns1__GetResourceDataResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetResourceDataResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetResourceDataResponse(struct soap *soap, _ns1__GetResourceDataResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetResourceDataResponse * SOAP_FMAC4 soap_instantiate__ns1__GetResourceDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResourceDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResourceDataResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetResourceDataResponse;
		if (size)
			*size = sizeof(_ns1__GetResourceDataResponse);
		((_ns1__GetResourceDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetResourceDataResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetResourceDataResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetResourceDataResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetResourceDataResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResourceDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResourceDataResponse %p -> %p\n", q, p));
	*(_ns1__GetResourceDataResponse*)p = *(_ns1__GetResourceDataResponse*)q;
}

void _ns1__GetResourceData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetResourceData::md5 = NULL;
	this->_ns1__GetResourceData::internalName = NULL;
	/* transient soap skipped */
}

void _ns1__GetResourceData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetResourceData::md5);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetResourceData::internalName);
	/* transient soap skipped */
}

int _ns1__GetResourceData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetResourceData);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetResourceData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetResourceData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetResourceData(struct soap *soap, const char *tag, int id, const _ns1__GetResourceData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetResourceData), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:md5", -1, &(a->_ns1__GetResourceData::md5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:internalName", -1, &(a->_ns1__GetResourceData::internalName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetResourceData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetResourceData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetResourceData * SOAP_FMAC4 soap_get__ns1__GetResourceData(struct soap *soap, _ns1__GetResourceData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetResourceData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetResourceData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetResourceData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetResourceData * SOAP_FMAC4 soap_in__ns1__GetResourceData(struct soap *soap, const char *tag, _ns1__GetResourceData *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetResourceData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetResourceData, sizeof(_ns1__GetResourceData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetResourceData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetResourceData *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_md51 = 1, soap_flag_internalName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_md51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:md5", &(a->_ns1__GetResourceData::md5), "xsd:string"))
				{	soap_flag_md51--;
					continue;
				}
			if (soap_flag_internalName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:internalName", &(a->_ns1__GetResourceData::internalName), "xsd:string"))
				{	soap_flag_internalName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetResourceData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetResourceData, 0, sizeof(_ns1__GetResourceData), 0, soap_copy__ns1__GetResourceData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetResourceData * SOAP_FMAC6 soap_new__ns1__GetResourceData(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetResourceData(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetResourceData(struct soap *soap, _ns1__GetResourceData *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetResourceData * SOAP_FMAC4 soap_instantiate__ns1__GetResourceData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetResourceData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetResourceData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetResourceData;
		if (size)
			*size = sizeof(_ns1__GetResourceData);
		((_ns1__GetResourceData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetResourceData[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetResourceData);
		for (int i = 0; i < n; i++)
			((_ns1__GetResourceData*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetResourceData*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetResourceData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetResourceData %p -> %p\n", q, p));
	*(_ns1__GetResourceData*)p = *(_ns1__GetResourceData*)q;
}

void _ns1__DownloadFileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__DownloadFileResponse::DownloadFileResult);
	this->_ns1__DownloadFileResponse::links = NULL;
	this->_ns1__DownloadFileResponse::torrent = NULL;
	this->_ns1__DownloadFileResponse::dependencies = NULL;
	soap_default_ns1__ResourceType(soap, &this->_ns1__DownloadFileResponse::resourceType);
	this->_ns1__DownloadFileResponse::torrentFileName = NULL;
	/* transient soap skipped */
}

void _ns1__DownloadFileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__DownloadFileResponse::links);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__DownloadFileResponse::torrent);
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__DownloadFileResponse::dependencies);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DownloadFileResponse::torrentFileName);
	/* transient soap skipped */
}

int _ns1__DownloadFileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DownloadFileResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__DownloadFileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DownloadFileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownloadFileResponse(struct soap *soap, const char *tag, int id, const _ns1__DownloadFileResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DownloadFileResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:DownloadFileResult");
	if (soap_out_bool(soap, "ns1:DownloadFileResult", -1, &(a->_ns1__DownloadFileResponse::DownloadFileResult), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:links", -1, &(a->_ns1__DownloadFileResponse::links), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:torrent", -1, &(a->_ns1__DownloadFileResponse::torrent), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:dependencies", -1, &(a->_ns1__DownloadFileResponse::dependencies), ""))
		return soap->error;
	if (soap_out_ns1__ResourceType(soap, "ns1:resourceType", -1, &(a->_ns1__DownloadFileResponse::resourceType), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:torrentFileName", -1, &(a->_ns1__DownloadFileResponse::torrentFileName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DownloadFileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DownloadFileResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DownloadFileResponse * SOAP_FMAC4 soap_get__ns1__DownloadFileResponse(struct soap *soap, _ns1__DownloadFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DownloadFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__DownloadFileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DownloadFileResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DownloadFileResponse * SOAP_FMAC4 soap_in__ns1__DownloadFileResponse(struct soap *soap, const char *tag, _ns1__DownloadFileResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DownloadFileResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DownloadFileResponse, sizeof(_ns1__DownloadFileResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DownloadFileResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DownloadFileResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_DownloadFileResult1 = 1, soap_flag_links1 = 1, soap_flag_torrent1 = 1, soap_flag_dependencies1 = 1, soap_flag_resourceType1 = 1, soap_flag_torrentFileName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DownloadFileResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:DownloadFileResult", &(a->_ns1__DownloadFileResponse::DownloadFileResult), "xsd:boolean"))
				{	soap_flag_DownloadFileResult1--;
					continue;
				}
			if (soap_flag_links1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:links", &(a->_ns1__DownloadFileResponse::links), "ns1:ArrayOfString"))
				{	soap_flag_links1--;
					continue;
				}
			if (soap_flag_torrent1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:torrent", &(a->_ns1__DownloadFileResponse::torrent), "xsd:base64Binary"))
				{	soap_flag_torrent1--;
					continue;
				}
			if (soap_flag_dependencies1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:dependencies", &(a->_ns1__DownloadFileResponse::dependencies), "ns1:ArrayOfString"))
				{	soap_flag_dependencies1--;
					continue;
				}
			if (soap_flag_resourceType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__ResourceType(soap, "ns1:resourceType", &(a->_ns1__DownloadFileResponse::resourceType), "ns1:ResourceType"))
				{	soap_flag_resourceType1--;
					continue;
				}
			if (soap_flag_torrentFileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:torrentFileName", &(a->_ns1__DownloadFileResponse::torrentFileName), "xsd:string"))
				{	soap_flag_torrentFileName1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:DownloadFileResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DownloadFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DownloadFileResponse, 0, sizeof(_ns1__DownloadFileResponse), 0, soap_copy__ns1__DownloadFileResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DownloadFileResult1 > 0 || soap_flag_resourceType1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__DownloadFileResponse * SOAP_FMAC6 soap_new__ns1__DownloadFileResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__DownloadFileResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__DownloadFileResponse(struct soap *soap, _ns1__DownloadFileResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__DownloadFileResponse * SOAP_FMAC4 soap_instantiate__ns1__DownloadFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DownloadFileResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DownloadFileResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__DownloadFileResponse;
		if (size)
			*size = sizeof(_ns1__DownloadFileResponse);
		((_ns1__DownloadFileResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__DownloadFileResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DownloadFileResponse);
		for (int i = 0; i < n; i++)
			((_ns1__DownloadFileResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DownloadFileResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DownloadFileResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DownloadFileResponse %p -> %p\n", q, p));
	*(_ns1__DownloadFileResponse*)p = *(_ns1__DownloadFileResponse*)q;
}

void _ns1__DownloadFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DownloadFile::internalName = NULL;
	/* transient soap skipped */
}

void _ns1__DownloadFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DownloadFile::internalName);
	/* transient soap skipped */
}

int _ns1__DownloadFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DownloadFile);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__DownloadFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DownloadFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownloadFile(struct soap *soap, const char *tag, int id, const _ns1__DownloadFile *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DownloadFile), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:internalName", -1, &(a->_ns1__DownloadFile::internalName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DownloadFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DownloadFile(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DownloadFile * SOAP_FMAC4 soap_get__ns1__DownloadFile(struct soap *soap, _ns1__DownloadFile *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DownloadFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__DownloadFile::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DownloadFile(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DownloadFile * SOAP_FMAC4 soap_in__ns1__DownloadFile(struct soap *soap, const char *tag, _ns1__DownloadFile *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DownloadFile *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DownloadFile, sizeof(_ns1__DownloadFile), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DownloadFile)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DownloadFile *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_internalName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_internalName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:internalName", &(a->_ns1__DownloadFile::internalName), "xsd:string"))
				{	soap_flag_internalName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DownloadFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DownloadFile, 0, sizeof(_ns1__DownloadFile), 0, soap_copy__ns1__DownloadFile);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__DownloadFile * SOAP_FMAC6 soap_new__ns1__DownloadFile(struct soap *soap, int n)
{	return soap_instantiate__ns1__DownloadFile(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__DownloadFile(struct soap *soap, _ns1__DownloadFile *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__DownloadFile * SOAP_FMAC4 soap_instantiate__ns1__DownloadFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DownloadFile(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DownloadFile, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__DownloadFile;
		if (size)
			*size = sizeof(_ns1__DownloadFile);
		((_ns1__DownloadFile*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__DownloadFile[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DownloadFile);
		for (int i = 0; i < n; i++)
			((_ns1__DownloadFile*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DownloadFile*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DownloadFile(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DownloadFile %p -> %p\n", q, p));
	*(_ns1__DownloadFile*)p = *(_ns1__DownloadFile*)q;
}

void _ns1__DeleteResourceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns1__ReturnValue(soap, &this->_ns1__DeleteResourceResponse::DeleteResourceResult);
	/* transient soap skipped */
}

void _ns1__DeleteResourceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__DeleteResourceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DeleteResourceResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__DeleteResourceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DeleteResourceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteResourceResponse(struct soap *soap, const char *tag, int id, const _ns1__DeleteResourceResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DeleteResourceResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:DeleteResourceResult");
	if (soap_out_ns1__ReturnValue(soap, "ns1:DeleteResourceResult", -1, &(a->_ns1__DeleteResourceResponse::DeleteResourceResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DeleteResourceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DeleteResourceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DeleteResourceResponse * SOAP_FMAC4 soap_get__ns1__DeleteResourceResponse(struct soap *soap, _ns1__DeleteResourceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DeleteResourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__DeleteResourceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DeleteResourceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DeleteResourceResponse * SOAP_FMAC4 soap_in__ns1__DeleteResourceResponse(struct soap *soap, const char *tag, _ns1__DeleteResourceResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DeleteResourceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DeleteResourceResponse, sizeof(_ns1__DeleteResourceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DeleteResourceResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DeleteResourceResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_DeleteResourceResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeleteResourceResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__ReturnValue(soap, "ns1:DeleteResourceResult", &(a->_ns1__DeleteResourceResponse::DeleteResourceResult), "ns1:ReturnValue"))
				{	soap_flag_DeleteResourceResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:DeleteResourceResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DeleteResourceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DeleteResourceResponse, 0, sizeof(_ns1__DeleteResourceResponse), 0, soap_copy__ns1__DeleteResourceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeleteResourceResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__DeleteResourceResponse * SOAP_FMAC6 soap_new__ns1__DeleteResourceResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__DeleteResourceResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__DeleteResourceResponse(struct soap *soap, _ns1__DeleteResourceResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__DeleteResourceResponse * SOAP_FMAC4 soap_instantiate__ns1__DeleteResourceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DeleteResourceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DeleteResourceResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__DeleteResourceResponse;
		if (size)
			*size = sizeof(_ns1__DeleteResourceResponse);
		((_ns1__DeleteResourceResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__DeleteResourceResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DeleteResourceResponse);
		for (int i = 0; i < n; i++)
			((_ns1__DeleteResourceResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DeleteResourceResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteResourceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DeleteResourceResponse %p -> %p\n", q, p));
	*(_ns1__DeleteResourceResponse*)p = *(_ns1__DeleteResourceResponse*)q;
}

void _ns1__DeleteResource::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DeleteResource::login = NULL;
	this->_ns1__DeleteResource::password = NULL;
	this->_ns1__DeleteResource::internalName = NULL;
	/* transient soap skipped */
}

void _ns1__DeleteResource::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DeleteResource::login);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DeleteResource::password);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DeleteResource::internalName);
	/* transient soap skipped */
}

int _ns1__DeleteResource::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DeleteResource);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__DeleteResource::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DeleteResource(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteResource(struct soap *soap, const char *tag, int id, const _ns1__DeleteResource *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DeleteResource), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:login", -1, &(a->_ns1__DeleteResource::login), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:password", -1, &(a->_ns1__DeleteResource::password), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:internalName", -1, &(a->_ns1__DeleteResource::internalName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DeleteResource::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DeleteResource(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DeleteResource * SOAP_FMAC4 soap_get__ns1__DeleteResource(struct soap *soap, _ns1__DeleteResource *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DeleteResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__DeleteResource::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DeleteResource(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DeleteResource * SOAP_FMAC4 soap_in__ns1__DeleteResource(struct soap *soap, const char *tag, _ns1__DeleteResource *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DeleteResource *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DeleteResource, sizeof(_ns1__DeleteResource), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DeleteResource)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DeleteResource *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_login1 = 1, soap_flag_password1 = 1, soap_flag_internalName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_login1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:login", &(a->_ns1__DeleteResource::login), "xsd:string"))
				{	soap_flag_login1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:password", &(a->_ns1__DeleteResource::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			if (soap_flag_internalName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:internalName", &(a->_ns1__DeleteResource::internalName), "xsd:string"))
				{	soap_flag_internalName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DeleteResource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DeleteResource, 0, sizeof(_ns1__DeleteResource), 0, soap_copy__ns1__DeleteResource);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__DeleteResource * SOAP_FMAC6 soap_new__ns1__DeleteResource(struct soap *soap, int n)
{	return soap_instantiate__ns1__DeleteResource(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__DeleteResource(struct soap *soap, _ns1__DeleteResource *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__DeleteResource * SOAP_FMAC4 soap_instantiate__ns1__DeleteResource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DeleteResource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DeleteResource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__DeleteResource;
		if (size)
			*size = sizeof(_ns1__DeleteResource);
		((_ns1__DeleteResource*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__DeleteResource[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DeleteResource);
		for (int i = 0; i < n; i++)
			((_ns1__DeleteResource*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DeleteResource*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteResource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DeleteResource %p -> %p\n", q, p));
	*(_ns1__DeleteResource*)p = *(_ns1__DeleteResource*)q;
}

void ns1__ArrayOfResourceData::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ResourceData(soap, &this->ns1__ArrayOfResourceData::ResourceData);
	/* transient soap skipped */
}

void ns1__ArrayOfResourceData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__ResourceData(soap, &this->ns1__ArrayOfResourceData::ResourceData);
	/* transient soap skipped */
}

int ns1__ArrayOfResourceData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfResourceData);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfResourceData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfResourceData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfResourceData(struct soap *soap, const char *tag, int id, const ns1__ArrayOfResourceData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfResourceData), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ResourceData(soap, "ns1:ResourceData", -1, &(a->ns1__ArrayOfResourceData::ResourceData), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfResourceData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfResourceData(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfResourceData * SOAP_FMAC4 soap_get_ns1__ArrayOfResourceData(struct soap *soap, ns1__ArrayOfResourceData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfResourceData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfResourceData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfResourceData(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfResourceData * SOAP_FMAC4 soap_in_ns1__ArrayOfResourceData(struct soap *soap, const char *tag, ns1__ArrayOfResourceData *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfResourceData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfResourceData, sizeof(ns1__ArrayOfResourceData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfResourceData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfResourceData *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ResourceData(soap, "ns1:ResourceData", &(a->ns1__ArrayOfResourceData::ResourceData), "ns1:ResourceData"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfResourceData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfResourceData, 0, sizeof(ns1__ArrayOfResourceData), 0, soap_copy_ns1__ArrayOfResourceData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfResourceData * SOAP_FMAC6 soap_new_ns1__ArrayOfResourceData(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfResourceData(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfResourceData(struct soap *soap, ns1__ArrayOfResourceData *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfResourceData * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfResourceData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfResourceData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfResourceData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfResourceData;
		if (size)
			*size = sizeof(ns1__ArrayOfResourceData);
		((ns1__ArrayOfResourceData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfResourceData[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfResourceData);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfResourceData*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfResourceData*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfResourceData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfResourceData %p -> %p\n", q, p));
	*(ns1__ArrayOfResourceData*)p = *(ns1__ArrayOfResourceData*)q;
}

void ns1__SpringHashEntry::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__SpringHashEntry::SpringHash);
	this->ns1__SpringHashEntry::SpringVersion = NULL;
	/* transient soap skipped */
}

void ns1__SpringHashEntry::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__SpringHashEntry::SpringVersion);
	/* transient soap skipped */
}

int ns1__SpringHashEntry::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__SpringHashEntry);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__SpringHashEntry::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__SpringHashEntry(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SpringHashEntry(struct soap *soap, const char *tag, int id, const ns1__SpringHashEntry *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SpringHashEntry), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:SpringHash", -1, &(a->ns1__SpringHashEntry::SpringHash), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:SpringVersion", -1, &(a->ns1__SpringHashEntry::SpringVersion), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__SpringHashEntry::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__SpringHashEntry(soap, this, tag, type);
}

SOAP_FMAC3 ns1__SpringHashEntry * SOAP_FMAC4 soap_get_ns1__SpringHashEntry(struct soap *soap, ns1__SpringHashEntry *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SpringHashEntry(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__SpringHashEntry::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__SpringHashEntry(soap, tag, this, type);
}

SOAP_FMAC3 ns1__SpringHashEntry * SOAP_FMAC4 soap_in_ns1__SpringHashEntry(struct soap *soap, const char *tag, ns1__SpringHashEntry *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__SpringHashEntry *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SpringHashEntry, sizeof(ns1__SpringHashEntry), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__SpringHashEntry)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__SpringHashEntry *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_SpringHash1 = 1, soap_flag_SpringVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SpringHash1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:SpringHash", &(a->ns1__SpringHashEntry::SpringHash), "xsd:int"))
				{	soap_flag_SpringHash1--;
					continue;
				}
			if (soap_flag_SpringVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SpringVersion", &(a->ns1__SpringHashEntry::SpringVersion), "xsd:string"))
				{	soap_flag_SpringVersion1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__SpringHashEntry *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SpringHashEntry, 0, sizeof(ns1__SpringHashEntry), 0, soap_copy_ns1__SpringHashEntry);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SpringHash1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__SpringHashEntry * SOAP_FMAC6 soap_new_ns1__SpringHashEntry(struct soap *soap, int n)
{	return soap_instantiate_ns1__SpringHashEntry(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__SpringHashEntry(struct soap *soap, ns1__SpringHashEntry *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__SpringHashEntry * SOAP_FMAC4 soap_instantiate_ns1__SpringHashEntry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SpringHashEntry(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__SpringHashEntry, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__SpringHashEntry;
		if (size)
			*size = sizeof(ns1__SpringHashEntry);
		((ns1__SpringHashEntry*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__SpringHashEntry[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__SpringHashEntry);
		for (int i = 0; i < n; i++)
			((ns1__SpringHashEntry*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__SpringHashEntry*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SpringHashEntry(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__SpringHashEntry %p -> %p\n", q, p));
	*(ns1__SpringHashEntry*)p = *(ns1__SpringHashEntry*)q;
}

void ns1__ArrayOfSpringHashEntry::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__SpringHashEntry(soap, &this->ns1__ArrayOfSpringHashEntry::SpringHashEntry);
	/* transient soap skipped */
}

void ns1__ArrayOfSpringHashEntry::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__SpringHashEntry(soap, &this->ns1__ArrayOfSpringHashEntry::SpringHashEntry);
	/* transient soap skipped */
}

int ns1__ArrayOfSpringHashEntry::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfSpringHashEntry);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfSpringHashEntry::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfSpringHashEntry(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfSpringHashEntry(struct soap *soap, const char *tag, int id, const ns1__ArrayOfSpringHashEntry *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfSpringHashEntry), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__SpringHashEntry(soap, "ns1:SpringHashEntry", -1, &(a->ns1__ArrayOfSpringHashEntry::SpringHashEntry), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfSpringHashEntry::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfSpringHashEntry(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfSpringHashEntry * SOAP_FMAC4 soap_get_ns1__ArrayOfSpringHashEntry(struct soap *soap, ns1__ArrayOfSpringHashEntry *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfSpringHashEntry(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfSpringHashEntry::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfSpringHashEntry(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfSpringHashEntry * SOAP_FMAC4 soap_in_ns1__ArrayOfSpringHashEntry(struct soap *soap, const char *tag, ns1__ArrayOfSpringHashEntry *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfSpringHashEntry *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfSpringHashEntry, sizeof(ns1__ArrayOfSpringHashEntry), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfSpringHashEntry)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfSpringHashEntry *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__SpringHashEntry(soap, "ns1:SpringHashEntry", &(a->ns1__ArrayOfSpringHashEntry::SpringHashEntry), "ns1:SpringHashEntry"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfSpringHashEntry *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfSpringHashEntry, 0, sizeof(ns1__ArrayOfSpringHashEntry), 0, soap_copy_ns1__ArrayOfSpringHashEntry);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfSpringHashEntry * SOAP_FMAC6 soap_new_ns1__ArrayOfSpringHashEntry(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfSpringHashEntry(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfSpringHashEntry(struct soap *soap, ns1__ArrayOfSpringHashEntry *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfSpringHashEntry * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfSpringHashEntry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfSpringHashEntry(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfSpringHashEntry, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfSpringHashEntry;
		if (size)
			*size = sizeof(ns1__ArrayOfSpringHashEntry);
		((ns1__ArrayOfSpringHashEntry*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfSpringHashEntry[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfSpringHashEntry);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfSpringHashEntry*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfSpringHashEntry*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfSpringHashEntry(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfSpringHashEntry %p -> %p\n", q, p));
	*(ns1__ArrayOfSpringHashEntry*)p = *(ns1__ArrayOfSpringHashEntry*)q;
}

void ns1__ResourceData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ResourceData::Dependencies = NULL;
	this->ns1__ResourceData::InternalName = NULL;
	soap_default_ns1__ResourceType(soap, &this->ns1__ResourceData::ResourceType);
	this->ns1__ResourceData::SpringHashes = NULL;
	/* transient soap skipped */
}

void ns1__ResourceData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->ns1__ResourceData::Dependencies);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ResourceData::InternalName);
	soap_serialize_PointerTons1__ArrayOfSpringHashEntry(soap, &this->ns1__ResourceData::SpringHashes);
	/* transient soap skipped */
}

int ns1__ResourceData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ResourceData);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ResourceData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ResourceData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ResourceData(struct soap *soap, const char *tag, int id, const ns1__ResourceData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ResourceData), type))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:Dependencies", -1, &(a->ns1__ResourceData::Dependencies), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:InternalName", -1, &(a->ns1__ResourceData::InternalName), ""))
		return soap->error;
	if (soap_out_ns1__ResourceType(soap, "ns1:ResourceType", -1, &(a->ns1__ResourceData::ResourceType), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfSpringHashEntry(soap, "ns1:SpringHashes", -1, &(a->ns1__ResourceData::SpringHashes), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ResourceData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ResourceData(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ResourceData * SOAP_FMAC4 soap_get_ns1__ResourceData(struct soap *soap, ns1__ResourceData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ResourceData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ResourceData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ResourceData(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ResourceData * SOAP_FMAC4 soap_in_ns1__ResourceData(struct soap *soap, const char *tag, ns1__ResourceData *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ResourceData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ResourceData, sizeof(ns1__ResourceData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ResourceData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ResourceData *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_Dependencies1 = 1, soap_flag_InternalName1 = 1, soap_flag_ResourceType1 = 1, soap_flag_SpringHashes1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Dependencies1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:Dependencies", &(a->ns1__ResourceData::Dependencies), "ns1:ArrayOfString"))
				{	soap_flag_Dependencies1--;
					continue;
				}
			if (soap_flag_InternalName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:InternalName", &(a->ns1__ResourceData::InternalName), "xsd:string"))
				{	soap_flag_InternalName1--;
					continue;
				}
			if (soap_flag_ResourceType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__ResourceType(soap, "ns1:ResourceType", &(a->ns1__ResourceData::ResourceType), "ns1:ResourceType"))
				{	soap_flag_ResourceType1--;
					continue;
				}
			if (soap_flag_SpringHashes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfSpringHashEntry(soap, "ns1:SpringHashes", &(a->ns1__ResourceData::SpringHashes), "ns1:ArrayOfSpringHashEntry"))
				{	soap_flag_SpringHashes1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ResourceData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ResourceData, 0, sizeof(ns1__ResourceData), 0, soap_copy_ns1__ResourceData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ResourceType1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ResourceData * SOAP_FMAC6 soap_new_ns1__ResourceData(struct soap *soap, int n)
{	return soap_instantiate_ns1__ResourceData(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ResourceData(struct soap *soap, ns1__ResourceData *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ResourceData * SOAP_FMAC4 soap_instantiate_ns1__ResourceData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ResourceData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ResourceData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ResourceData;
		if (size)
			*size = sizeof(ns1__ResourceData);
		((ns1__ResourceData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ResourceData[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ResourceData);
		for (int i = 0; i < n; i++)
			((ns1__ResourceData*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ResourceData*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ResourceData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ResourceData %p -> %p\n", q, p));
	*(ns1__ResourceData*)p = *(ns1__ResourceData*)q;
}

void ns1__ArrayOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns1__ArrayOfString::string);
	/* transient soap skipped */
}

void ns1__ArrayOfString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns1__ArrayOfString::string);
	/* transient soap skipped */
}

int ns1__ArrayOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfString);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfString(struct soap *soap, const char *tag, int id, const ns1__ArrayOfString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfString), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ns1:string", -1, &(a->ns1__ArrayOfString::string), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfString(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_get_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfString(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_in_ns1__ArrayOfString(struct soap *soap, const char *tag, ns1__ArrayOfString *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfString, sizeof(ns1__ArrayOfString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfString *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "ns1:string", &(a->ns1__ArrayOfString::string), "xsd:string"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfString, 0, sizeof(ns1__ArrayOfString), 0, soap_copy_ns1__ArrayOfString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfString * SOAP_FMAC6 soap_new_ns1__ArrayOfString(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfString(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfString, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfString;
		if (size)
			*size = sizeof(ns1__ArrayOfString);
		((ns1__ArrayOfString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfString[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfString);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfString*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfString*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfString %p -> %p\n", q, p));
	*(ns1__ArrayOfString*)p = *(ns1__ArrayOfString*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_new_xsd__base64Binary(struct soap *soap, int n)
{	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__base64Binary;
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__base64Binary[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__RegisterResource(struct soap *soap, struct __ns3__RegisterResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__RegisterResource = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__RegisterResource(struct soap *soap, const struct __ns3__RegisterResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__RegisterResource(soap, &a->ns1__RegisterResource);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__RegisterResource(struct soap *soap, const struct __ns3__RegisterResource *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__RegisterResource(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__RegisterResource(struct soap *soap, const char *tag, int id, const struct __ns3__RegisterResource *a, const char *type)
{
	if (soap_out_PointerTo_ns1__RegisterResource(soap, "ns1:RegisterResource", -1, &a->ns1__RegisterResource, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__RegisterResource * SOAP_FMAC4 soap_get___ns3__RegisterResource(struct soap *soap, struct __ns3__RegisterResource *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__RegisterResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__RegisterResource * SOAP_FMAC4 soap_in___ns3__RegisterResource(struct soap *soap, const char *tag, struct __ns3__RegisterResource *a, const char *type)
{
	short soap_flag_ns1__RegisterResource = 1;
	short soap_flag;
	a = (struct __ns3__RegisterResource *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__RegisterResource, sizeof(struct __ns3__RegisterResource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__RegisterResource(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__RegisterResource && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__RegisterResource(soap, "ns1:RegisterResource", &a->ns1__RegisterResource, ""))
				{	soap_flag_ns1__RegisterResource--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__RegisterResource * SOAP_FMAC6 soap_new___ns3__RegisterResource(struct soap *soap, int n)
{	return soap_instantiate___ns3__RegisterResource(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__RegisterResource(struct soap *soap, struct __ns3__RegisterResource *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__RegisterResource * SOAP_FMAC4 soap_instantiate___ns3__RegisterResource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__RegisterResource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__RegisterResource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__RegisterResource;
		if (size)
			*size = sizeof(struct __ns3__RegisterResource);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__RegisterResource[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__RegisterResource);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__RegisterResource*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__RegisterResource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__RegisterResource %p -> %p\n", q, p));
	*(struct __ns3__RegisterResource*)p = *(struct __ns3__RegisterResource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetResourceList(struct soap *soap, struct __ns3__GetResourceList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResourceList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetResourceList(struct soap *soap, const struct __ns3__GetResourceList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetResourceList(soap, &a->ns1__GetResourceList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetResourceList(struct soap *soap, const struct __ns3__GetResourceList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetResourceList(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetResourceList(struct soap *soap, const char *tag, int id, const struct __ns3__GetResourceList *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetResourceList(soap, "ns1:GetResourceList", -1, &a->ns1__GetResourceList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetResourceList * SOAP_FMAC4 soap_get___ns3__GetResourceList(struct soap *soap, struct __ns3__GetResourceList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetResourceList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetResourceList * SOAP_FMAC4 soap_in___ns3__GetResourceList(struct soap *soap, const char *tag, struct __ns3__GetResourceList *a, const char *type)
{
	short soap_flag_ns1__GetResourceList = 1;
	short soap_flag;
	a = (struct __ns3__GetResourceList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetResourceList, sizeof(struct __ns3__GetResourceList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetResourceList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResourceList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResourceList(soap, "ns1:GetResourceList", &a->ns1__GetResourceList, ""))
				{	soap_flag_ns1__GetResourceList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetResourceList * SOAP_FMAC6 soap_new___ns3__GetResourceList(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetResourceList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetResourceList(struct soap *soap, struct __ns3__GetResourceList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetResourceList * SOAP_FMAC4 soap_instantiate___ns3__GetResourceList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetResourceList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetResourceList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetResourceList;
		if (size)
			*size = sizeof(struct __ns3__GetResourceList);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetResourceList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetResourceList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetResourceList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetResourceList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetResourceList %p -> %p\n", q, p));
	*(struct __ns3__GetResourceList*)p = *(struct __ns3__GetResourceList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetResourceData(struct soap *soap, struct __ns3__GetResourceData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResourceData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetResourceData(struct soap *soap, const struct __ns3__GetResourceData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetResourceData(soap, &a->ns1__GetResourceData);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetResourceData(struct soap *soap, const struct __ns3__GetResourceData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetResourceData(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetResourceData(struct soap *soap, const char *tag, int id, const struct __ns3__GetResourceData *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetResourceData(soap, "ns1:GetResourceData", -1, &a->ns1__GetResourceData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetResourceData * SOAP_FMAC4 soap_get___ns3__GetResourceData(struct soap *soap, struct __ns3__GetResourceData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetResourceData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetResourceData * SOAP_FMAC4 soap_in___ns3__GetResourceData(struct soap *soap, const char *tag, struct __ns3__GetResourceData *a, const char *type)
{
	short soap_flag_ns1__GetResourceData = 1;
	short soap_flag;
	a = (struct __ns3__GetResourceData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetResourceData, sizeof(struct __ns3__GetResourceData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetResourceData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResourceData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResourceData(soap, "ns1:GetResourceData", &a->ns1__GetResourceData, ""))
				{	soap_flag_ns1__GetResourceData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetResourceData * SOAP_FMAC6 soap_new___ns3__GetResourceData(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetResourceData(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetResourceData(struct soap *soap, struct __ns3__GetResourceData *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetResourceData * SOAP_FMAC4 soap_instantiate___ns3__GetResourceData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetResourceData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetResourceData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetResourceData;
		if (size)
			*size = sizeof(struct __ns3__GetResourceData);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetResourceData[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetResourceData);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetResourceData*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetResourceData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetResourceData %p -> %p\n", q, p));
	*(struct __ns3__GetResourceData*)p = *(struct __ns3__GetResourceData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__DownloadFile(struct soap *soap, struct __ns3__DownloadFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DownloadFile = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__DownloadFile(struct soap *soap, const struct __ns3__DownloadFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DownloadFile(soap, &a->ns1__DownloadFile);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__DownloadFile(struct soap *soap, const struct __ns3__DownloadFile *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__DownloadFile(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__DownloadFile(struct soap *soap, const char *tag, int id, const struct __ns3__DownloadFile *a, const char *type)
{
	if (soap_out_PointerTo_ns1__DownloadFile(soap, "ns1:DownloadFile", -1, &a->ns1__DownloadFile, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__DownloadFile * SOAP_FMAC4 soap_get___ns3__DownloadFile(struct soap *soap, struct __ns3__DownloadFile *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__DownloadFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__DownloadFile * SOAP_FMAC4 soap_in___ns3__DownloadFile(struct soap *soap, const char *tag, struct __ns3__DownloadFile *a, const char *type)
{
	short soap_flag_ns1__DownloadFile = 1;
	short soap_flag;
	a = (struct __ns3__DownloadFile *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__DownloadFile, sizeof(struct __ns3__DownloadFile), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__DownloadFile(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DownloadFile && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DownloadFile(soap, "ns1:DownloadFile", &a->ns1__DownloadFile, ""))
				{	soap_flag_ns1__DownloadFile--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__DownloadFile * SOAP_FMAC6 soap_new___ns3__DownloadFile(struct soap *soap, int n)
{	return soap_instantiate___ns3__DownloadFile(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__DownloadFile(struct soap *soap, struct __ns3__DownloadFile *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__DownloadFile * SOAP_FMAC4 soap_instantiate___ns3__DownloadFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__DownloadFile(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__DownloadFile, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__DownloadFile;
		if (size)
			*size = sizeof(struct __ns3__DownloadFile);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__DownloadFile[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__DownloadFile);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__DownloadFile*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__DownloadFile(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__DownloadFile %p -> %p\n", q, p));
	*(struct __ns3__DownloadFile*)p = *(struct __ns3__DownloadFile*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__DeleteResource(struct soap *soap, struct __ns3__DeleteResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DeleteResource = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__DeleteResource(struct soap *soap, const struct __ns3__DeleteResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DeleteResource(soap, &a->ns1__DeleteResource);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__DeleteResource(struct soap *soap, const struct __ns3__DeleteResource *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__DeleteResource(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__DeleteResource(struct soap *soap, const char *tag, int id, const struct __ns3__DeleteResource *a, const char *type)
{
	if (soap_out_PointerTo_ns1__DeleteResource(soap, "ns1:DeleteResource", -1, &a->ns1__DeleteResource, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__DeleteResource * SOAP_FMAC4 soap_get___ns3__DeleteResource(struct soap *soap, struct __ns3__DeleteResource *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__DeleteResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__DeleteResource * SOAP_FMAC4 soap_in___ns3__DeleteResource(struct soap *soap, const char *tag, struct __ns3__DeleteResource *a, const char *type)
{
	short soap_flag_ns1__DeleteResource = 1;
	short soap_flag;
	a = (struct __ns3__DeleteResource *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__DeleteResource, sizeof(struct __ns3__DeleteResource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__DeleteResource(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DeleteResource && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DeleteResource(soap, "ns1:DeleteResource", &a->ns1__DeleteResource, ""))
				{	soap_flag_ns1__DeleteResource--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__DeleteResource * SOAP_FMAC6 soap_new___ns3__DeleteResource(struct soap *soap, int n)
{	return soap_instantiate___ns3__DeleteResource(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__DeleteResource(struct soap *soap, struct __ns3__DeleteResource *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__DeleteResource * SOAP_FMAC4 soap_instantiate___ns3__DeleteResource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__DeleteResource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__DeleteResource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__DeleteResource;
		if (size)
			*size = sizeof(struct __ns3__DeleteResource);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__DeleteResource[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__DeleteResource);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__DeleteResource*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__DeleteResource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__DeleteResource %p -> %p\n", q, p));
	*(struct __ns3__DeleteResource*)p = *(struct __ns3__DeleteResource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__RegisterResource(struct soap *soap, struct __ns2__RegisterResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__RegisterResource = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__RegisterResource(struct soap *soap, const struct __ns2__RegisterResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__RegisterResource(soap, &a->ns1__RegisterResource);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__RegisterResource(struct soap *soap, const struct __ns2__RegisterResource *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__RegisterResource(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__RegisterResource(struct soap *soap, const char *tag, int id, const struct __ns2__RegisterResource *a, const char *type)
{
	if (soap_out_PointerTo_ns1__RegisterResource(soap, "ns1:RegisterResource", -1, &a->ns1__RegisterResource, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__RegisterResource * SOAP_FMAC4 soap_get___ns2__RegisterResource(struct soap *soap, struct __ns2__RegisterResource *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__RegisterResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__RegisterResource * SOAP_FMAC4 soap_in___ns2__RegisterResource(struct soap *soap, const char *tag, struct __ns2__RegisterResource *a, const char *type)
{
	short soap_flag_ns1__RegisterResource = 1;
	short soap_flag;
	a = (struct __ns2__RegisterResource *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__RegisterResource, sizeof(struct __ns2__RegisterResource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__RegisterResource(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__RegisterResource && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__RegisterResource(soap, "ns1:RegisterResource", &a->ns1__RegisterResource, ""))
				{	soap_flag_ns1__RegisterResource--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__RegisterResource * SOAP_FMAC6 soap_new___ns2__RegisterResource(struct soap *soap, int n)
{	return soap_instantiate___ns2__RegisterResource(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__RegisterResource(struct soap *soap, struct __ns2__RegisterResource *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__RegisterResource * SOAP_FMAC4 soap_instantiate___ns2__RegisterResource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__RegisterResource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__RegisterResource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__RegisterResource;
		if (size)
			*size = sizeof(struct __ns2__RegisterResource);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__RegisterResource[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__RegisterResource);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__RegisterResource*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__RegisterResource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__RegisterResource %p -> %p\n", q, p));
	*(struct __ns2__RegisterResource*)p = *(struct __ns2__RegisterResource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetResourceList(struct soap *soap, struct __ns2__GetResourceList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResourceList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetResourceList(struct soap *soap, const struct __ns2__GetResourceList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetResourceList(soap, &a->ns1__GetResourceList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetResourceList(struct soap *soap, const struct __ns2__GetResourceList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetResourceList(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetResourceList(struct soap *soap, const char *tag, int id, const struct __ns2__GetResourceList *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetResourceList(soap, "ns1:GetResourceList", -1, &a->ns1__GetResourceList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetResourceList * SOAP_FMAC4 soap_get___ns2__GetResourceList(struct soap *soap, struct __ns2__GetResourceList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetResourceList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__GetResourceList * SOAP_FMAC4 soap_in___ns2__GetResourceList(struct soap *soap, const char *tag, struct __ns2__GetResourceList *a, const char *type)
{
	short soap_flag_ns1__GetResourceList = 1;
	short soap_flag;
	a = (struct __ns2__GetResourceList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetResourceList, sizeof(struct __ns2__GetResourceList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetResourceList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResourceList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResourceList(soap, "ns1:GetResourceList", &a->ns1__GetResourceList, ""))
				{	soap_flag_ns1__GetResourceList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__GetResourceList * SOAP_FMAC6 soap_new___ns2__GetResourceList(struct soap *soap, int n)
{	return soap_instantiate___ns2__GetResourceList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__GetResourceList(struct soap *soap, struct __ns2__GetResourceList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__GetResourceList * SOAP_FMAC4 soap_instantiate___ns2__GetResourceList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetResourceList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetResourceList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__GetResourceList;
		if (size)
			*size = sizeof(struct __ns2__GetResourceList);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__GetResourceList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetResourceList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetResourceList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetResourceList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetResourceList %p -> %p\n", q, p));
	*(struct __ns2__GetResourceList*)p = *(struct __ns2__GetResourceList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetResourceData(struct soap *soap, struct __ns2__GetResourceData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetResourceData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetResourceData(struct soap *soap, const struct __ns2__GetResourceData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetResourceData(soap, &a->ns1__GetResourceData);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetResourceData(struct soap *soap, const struct __ns2__GetResourceData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetResourceData(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetResourceData(struct soap *soap, const char *tag, int id, const struct __ns2__GetResourceData *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetResourceData(soap, "ns1:GetResourceData", -1, &a->ns1__GetResourceData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetResourceData * SOAP_FMAC4 soap_get___ns2__GetResourceData(struct soap *soap, struct __ns2__GetResourceData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetResourceData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__GetResourceData * SOAP_FMAC4 soap_in___ns2__GetResourceData(struct soap *soap, const char *tag, struct __ns2__GetResourceData *a, const char *type)
{
	short soap_flag_ns1__GetResourceData = 1;
	short soap_flag;
	a = (struct __ns2__GetResourceData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetResourceData, sizeof(struct __ns2__GetResourceData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetResourceData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetResourceData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetResourceData(soap, "ns1:GetResourceData", &a->ns1__GetResourceData, ""))
				{	soap_flag_ns1__GetResourceData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__GetResourceData * SOAP_FMAC6 soap_new___ns2__GetResourceData(struct soap *soap, int n)
{	return soap_instantiate___ns2__GetResourceData(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__GetResourceData(struct soap *soap, struct __ns2__GetResourceData *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__GetResourceData * SOAP_FMAC4 soap_instantiate___ns2__GetResourceData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetResourceData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetResourceData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__GetResourceData;
		if (size)
			*size = sizeof(struct __ns2__GetResourceData);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__GetResourceData[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetResourceData);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetResourceData*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetResourceData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetResourceData %p -> %p\n", q, p));
	*(struct __ns2__GetResourceData*)p = *(struct __ns2__GetResourceData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__DownloadFile(struct soap *soap, struct __ns2__DownloadFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DownloadFile = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__DownloadFile(struct soap *soap, const struct __ns2__DownloadFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DownloadFile(soap, &a->ns1__DownloadFile);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__DownloadFile(struct soap *soap, const struct __ns2__DownloadFile *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__DownloadFile(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__DownloadFile(struct soap *soap, const char *tag, int id, const struct __ns2__DownloadFile *a, const char *type)
{
	if (soap_out_PointerTo_ns1__DownloadFile(soap, "ns1:DownloadFile", -1, &a->ns1__DownloadFile, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__DownloadFile * SOAP_FMAC4 soap_get___ns2__DownloadFile(struct soap *soap, struct __ns2__DownloadFile *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__DownloadFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__DownloadFile * SOAP_FMAC4 soap_in___ns2__DownloadFile(struct soap *soap, const char *tag, struct __ns2__DownloadFile *a, const char *type)
{
	short soap_flag_ns1__DownloadFile = 1;
	short soap_flag;
	a = (struct __ns2__DownloadFile *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__DownloadFile, sizeof(struct __ns2__DownloadFile), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__DownloadFile(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DownloadFile && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DownloadFile(soap, "ns1:DownloadFile", &a->ns1__DownloadFile, ""))
				{	soap_flag_ns1__DownloadFile--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__DownloadFile * SOAP_FMAC6 soap_new___ns2__DownloadFile(struct soap *soap, int n)
{	return soap_instantiate___ns2__DownloadFile(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__DownloadFile(struct soap *soap, struct __ns2__DownloadFile *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__DownloadFile * SOAP_FMAC4 soap_instantiate___ns2__DownloadFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__DownloadFile(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__DownloadFile, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__DownloadFile;
		if (size)
			*size = sizeof(struct __ns2__DownloadFile);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__DownloadFile[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__DownloadFile);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__DownloadFile*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__DownloadFile(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__DownloadFile %p -> %p\n", q, p));
	*(struct __ns2__DownloadFile*)p = *(struct __ns2__DownloadFile*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__DeleteResource(struct soap *soap, struct __ns2__DeleteResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DeleteResource = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__DeleteResource(struct soap *soap, const struct __ns2__DeleteResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DeleteResource(soap, &a->ns1__DeleteResource);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__DeleteResource(struct soap *soap, const struct __ns2__DeleteResource *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__DeleteResource(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__DeleteResource(struct soap *soap, const char *tag, int id, const struct __ns2__DeleteResource *a, const char *type)
{
	if (soap_out_PointerTo_ns1__DeleteResource(soap, "ns1:DeleteResource", -1, &a->ns1__DeleteResource, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__DeleteResource * SOAP_FMAC4 soap_get___ns2__DeleteResource(struct soap *soap, struct __ns2__DeleteResource *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__DeleteResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__DeleteResource * SOAP_FMAC4 soap_in___ns2__DeleteResource(struct soap *soap, const char *tag, struct __ns2__DeleteResource *a, const char *type)
{
	short soap_flag_ns1__DeleteResource = 1;
	short soap_flag;
	a = (struct __ns2__DeleteResource *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__DeleteResource, sizeof(struct __ns2__DeleteResource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__DeleteResource(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DeleteResource && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DeleteResource(soap, "ns1:DeleteResource", &a->ns1__DeleteResource, ""))
				{	soap_flag_ns1__DeleteResource--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__DeleteResource * SOAP_FMAC6 soap_new___ns2__DeleteResource(struct soap *soap, int n)
{	return soap_instantiate___ns2__DeleteResource(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__DeleteResource(struct soap *soap, struct __ns2__DeleteResource *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__DeleteResource * SOAP_FMAC4 soap_instantiate___ns2__DeleteResource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__DeleteResource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__DeleteResource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__DeleteResource;
		if (size)
			*size = sizeof(struct __ns2__DeleteResource);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__DeleteResource[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__DeleteResource);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__DeleteResource*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__DeleteResource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__DeleteResource %p -> %p\n", q, p));
	*(struct __ns2__DeleteResource*)p = *(struct __ns2__DeleteResource*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RegisterResourceResponse(struct soap *soap, _ns1__RegisterResourceResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__RegisterResourceResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RegisterResourceResponse(struct soap *soap, _ns1__RegisterResourceResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__RegisterResourceResponse);
	if (soap_out_PointerTo_ns1__RegisterResourceResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RegisterResourceResponse(struct soap *soap, const char *tag, int id, _ns1__RegisterResourceResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__RegisterResourceResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__RegisterResourceResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__RegisterResourceResponse(struct soap *soap, _ns1__RegisterResourceResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__RegisterResourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__RegisterResourceResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__RegisterResourceResponse(struct soap *soap, const char *tag, _ns1__RegisterResourceResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__RegisterResourceResponse **)soap_malloc(soap, sizeof(_ns1__RegisterResourceResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__RegisterResourceResponse *)soap_instantiate__ns1__RegisterResourceResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__RegisterResourceResponse ** p = (_ns1__RegisterResourceResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__RegisterResourceResponse, sizeof(_ns1__RegisterResourceResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RegisterResource(struct soap *soap, _ns1__RegisterResource *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__RegisterResource))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RegisterResource(struct soap *soap, _ns1__RegisterResource *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__RegisterResource);
	if (soap_out_PointerTo_ns1__RegisterResource(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RegisterResource(struct soap *soap, const char *tag, int id, _ns1__RegisterResource *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__RegisterResource);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__RegisterResource ** SOAP_FMAC4 soap_get_PointerTo_ns1__RegisterResource(struct soap *soap, _ns1__RegisterResource **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__RegisterResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__RegisterResource ** SOAP_FMAC4 soap_in_PointerTo_ns1__RegisterResource(struct soap *soap, const char *tag, _ns1__RegisterResource **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__RegisterResource **)soap_malloc(soap, sizeof(_ns1__RegisterResource *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__RegisterResource *)soap_instantiate__ns1__RegisterResource(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__RegisterResource ** p = (_ns1__RegisterResource **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__RegisterResource, sizeof(_ns1__RegisterResource), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetResourceListResponse(struct soap *soap, _ns1__GetResourceListResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetResourceListResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetResourceListResponse(struct soap *soap, _ns1__GetResourceListResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetResourceListResponse);
	if (soap_out_PointerTo_ns1__GetResourceListResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetResourceListResponse(struct soap *soap, const char *tag, int id, _ns1__GetResourceListResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetResourceListResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetResourceListResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetResourceListResponse(struct soap *soap, _ns1__GetResourceListResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetResourceListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetResourceListResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetResourceListResponse(struct soap *soap, const char *tag, _ns1__GetResourceListResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetResourceListResponse **)soap_malloc(soap, sizeof(_ns1__GetResourceListResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetResourceListResponse *)soap_instantiate__ns1__GetResourceListResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetResourceListResponse ** p = (_ns1__GetResourceListResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetResourceListResponse, sizeof(_ns1__GetResourceListResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetResourceList(struct soap *soap, _ns1__GetResourceList *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetResourceList))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetResourceList(struct soap *soap, _ns1__GetResourceList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetResourceList);
	if (soap_out_PointerTo_ns1__GetResourceList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetResourceList(struct soap *soap, const char *tag, int id, _ns1__GetResourceList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetResourceList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetResourceList ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetResourceList(struct soap *soap, _ns1__GetResourceList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetResourceList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetResourceList ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetResourceList(struct soap *soap, const char *tag, _ns1__GetResourceList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetResourceList **)soap_malloc(soap, sizeof(_ns1__GetResourceList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetResourceList *)soap_instantiate__ns1__GetResourceList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetResourceList ** p = (_ns1__GetResourceList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetResourceList, sizeof(_ns1__GetResourceList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetResourceDataResponse(struct soap *soap, _ns1__GetResourceDataResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetResourceDataResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetResourceDataResponse(struct soap *soap, _ns1__GetResourceDataResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetResourceDataResponse);
	if (soap_out_PointerTo_ns1__GetResourceDataResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetResourceDataResponse(struct soap *soap, const char *tag, int id, _ns1__GetResourceDataResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetResourceDataResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetResourceDataResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetResourceDataResponse(struct soap *soap, _ns1__GetResourceDataResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetResourceDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetResourceDataResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetResourceDataResponse(struct soap *soap, const char *tag, _ns1__GetResourceDataResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetResourceDataResponse **)soap_malloc(soap, sizeof(_ns1__GetResourceDataResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetResourceDataResponse *)soap_instantiate__ns1__GetResourceDataResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetResourceDataResponse ** p = (_ns1__GetResourceDataResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetResourceDataResponse, sizeof(_ns1__GetResourceDataResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetResourceData(struct soap *soap, _ns1__GetResourceData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetResourceData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetResourceData(struct soap *soap, _ns1__GetResourceData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetResourceData);
	if (soap_out_PointerTo_ns1__GetResourceData(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetResourceData(struct soap *soap, const char *tag, int id, _ns1__GetResourceData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetResourceData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetResourceData ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetResourceData(struct soap *soap, _ns1__GetResourceData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetResourceData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetResourceData ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetResourceData(struct soap *soap, const char *tag, _ns1__GetResourceData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetResourceData **)soap_malloc(soap, sizeof(_ns1__GetResourceData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetResourceData *)soap_instantiate__ns1__GetResourceData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetResourceData ** p = (_ns1__GetResourceData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetResourceData, sizeof(_ns1__GetResourceData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DownloadFileResponse(struct soap *soap, _ns1__DownloadFileResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DownloadFileResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DownloadFileResponse(struct soap *soap, _ns1__DownloadFileResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DownloadFileResponse);
	if (soap_out_PointerTo_ns1__DownloadFileResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DownloadFileResponse(struct soap *soap, const char *tag, int id, _ns1__DownloadFileResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DownloadFileResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DownloadFileResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__DownloadFileResponse(struct soap *soap, _ns1__DownloadFileResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DownloadFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__DownloadFileResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__DownloadFileResponse(struct soap *soap, const char *tag, _ns1__DownloadFileResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DownloadFileResponse **)soap_malloc(soap, sizeof(_ns1__DownloadFileResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DownloadFileResponse *)soap_instantiate__ns1__DownloadFileResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DownloadFileResponse ** p = (_ns1__DownloadFileResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DownloadFileResponse, sizeof(_ns1__DownloadFileResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DownloadFile(struct soap *soap, _ns1__DownloadFile *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DownloadFile))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DownloadFile(struct soap *soap, _ns1__DownloadFile *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DownloadFile);
	if (soap_out_PointerTo_ns1__DownloadFile(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DownloadFile(struct soap *soap, const char *tag, int id, _ns1__DownloadFile *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DownloadFile);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DownloadFile ** SOAP_FMAC4 soap_get_PointerTo_ns1__DownloadFile(struct soap *soap, _ns1__DownloadFile **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DownloadFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__DownloadFile ** SOAP_FMAC4 soap_in_PointerTo_ns1__DownloadFile(struct soap *soap, const char *tag, _ns1__DownloadFile **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DownloadFile **)soap_malloc(soap, sizeof(_ns1__DownloadFile *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DownloadFile *)soap_instantiate__ns1__DownloadFile(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DownloadFile ** p = (_ns1__DownloadFile **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DownloadFile, sizeof(_ns1__DownloadFile), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeleteResourceResponse(struct soap *soap, _ns1__DeleteResourceResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DeleteResourceResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeleteResourceResponse(struct soap *soap, _ns1__DeleteResourceResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DeleteResourceResponse);
	if (soap_out_PointerTo_ns1__DeleteResourceResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeleteResourceResponse(struct soap *soap, const char *tag, int id, _ns1__DeleteResourceResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DeleteResourceResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DeleteResourceResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeleteResourceResponse(struct soap *soap, _ns1__DeleteResourceResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DeleteResourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__DeleteResourceResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeleteResourceResponse(struct soap *soap, const char *tag, _ns1__DeleteResourceResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DeleteResourceResponse **)soap_malloc(soap, sizeof(_ns1__DeleteResourceResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DeleteResourceResponse *)soap_instantiate__ns1__DeleteResourceResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DeleteResourceResponse ** p = (_ns1__DeleteResourceResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DeleteResourceResponse, sizeof(_ns1__DeleteResourceResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeleteResource(struct soap *soap, _ns1__DeleteResource *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DeleteResource))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeleteResource(struct soap *soap, _ns1__DeleteResource *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DeleteResource);
	if (soap_out_PointerTo_ns1__DeleteResource(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeleteResource(struct soap *soap, const char *tag, int id, _ns1__DeleteResource *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DeleteResource);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DeleteResource ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeleteResource(struct soap *soap, _ns1__DeleteResource **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DeleteResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__DeleteResource ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeleteResource(struct soap *soap, const char *tag, _ns1__DeleteResource **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DeleteResource **)soap_malloc(soap, sizeof(_ns1__DeleteResource *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DeleteResource *)soap_instantiate__ns1__DeleteResource(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DeleteResource ** p = (_ns1__DeleteResource **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DeleteResource, sizeof(_ns1__DeleteResource), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfResourceData(struct soap *soap, ns1__ArrayOfResourceData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfResourceData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfResourceData(struct soap *soap, ns1__ArrayOfResourceData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfResourceData);
	if (soap_out_PointerTons1__ArrayOfResourceData(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfResourceData(struct soap *soap, const char *tag, int id, ns1__ArrayOfResourceData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfResourceData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfResourceData ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfResourceData(struct soap *soap, ns1__ArrayOfResourceData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfResourceData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfResourceData ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfResourceData(struct soap *soap, const char *tag, ns1__ArrayOfResourceData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfResourceData **)soap_malloc(soap, sizeof(ns1__ArrayOfResourceData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfResourceData *)soap_instantiate_ns1__ArrayOfResourceData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfResourceData ** p = (ns1__ArrayOfResourceData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfResourceData, sizeof(ns1__ArrayOfResourceData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__base64Binary);
	if (soap_out_PointerToxsd__base64Binary(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__base64Binary ** p = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ResourceData(struct soap *soap, ns1__ResourceData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ResourceData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ResourceData(struct soap *soap, ns1__ResourceData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ResourceData);
	if (soap_out_PointerTons1__ResourceData(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ResourceData(struct soap *soap, const char *tag, int id, ns1__ResourceData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ResourceData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ResourceData ** SOAP_FMAC4 soap_get_PointerTons1__ResourceData(struct soap *soap, ns1__ResourceData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ResourceData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ResourceData ** SOAP_FMAC4 soap_in_PointerTons1__ResourceData(struct soap *soap, const char *tag, ns1__ResourceData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ResourceData **)soap_malloc(soap, sizeof(ns1__ResourceData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ResourceData *)soap_instantiate_ns1__ResourceData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ResourceData ** p = (ns1__ResourceData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ResourceData, sizeof(ns1__ResourceData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SpringHashEntry(struct soap *soap, ns1__SpringHashEntry *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__SpringHashEntry))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SpringHashEntry(struct soap *soap, ns1__SpringHashEntry *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__SpringHashEntry);
	if (soap_out_PointerTons1__SpringHashEntry(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SpringHashEntry(struct soap *soap, const char *tag, int id, ns1__SpringHashEntry *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__SpringHashEntry);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__SpringHashEntry ** SOAP_FMAC4 soap_get_PointerTons1__SpringHashEntry(struct soap *soap, ns1__SpringHashEntry **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__SpringHashEntry(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__SpringHashEntry ** SOAP_FMAC4 soap_in_PointerTons1__SpringHashEntry(struct soap *soap, const char *tag, ns1__SpringHashEntry **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__SpringHashEntry **)soap_malloc(soap, sizeof(ns1__SpringHashEntry *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__SpringHashEntry *)soap_instantiate_ns1__SpringHashEntry(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__SpringHashEntry ** p = (ns1__SpringHashEntry **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__SpringHashEntry, sizeof(ns1__SpringHashEntry), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfSpringHashEntry(struct soap *soap, ns1__ArrayOfSpringHashEntry *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfSpringHashEntry))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfSpringHashEntry(struct soap *soap, ns1__ArrayOfSpringHashEntry *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfSpringHashEntry);
	if (soap_out_PointerTons1__ArrayOfSpringHashEntry(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfSpringHashEntry(struct soap *soap, const char *tag, int id, ns1__ArrayOfSpringHashEntry *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfSpringHashEntry);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfSpringHashEntry ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfSpringHashEntry(struct soap *soap, ns1__ArrayOfSpringHashEntry **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfSpringHashEntry(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfSpringHashEntry ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfSpringHashEntry(struct soap *soap, const char *tag, ns1__ArrayOfSpringHashEntry **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfSpringHashEntry **)soap_malloc(soap, sizeof(ns1__ArrayOfSpringHashEntry *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfSpringHashEntry *)soap_instantiate_ns1__ArrayOfSpringHashEntry(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfSpringHashEntry ** p = (ns1__ArrayOfSpringHashEntry **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfSpringHashEntry, sizeof(ns1__ArrayOfSpringHashEntry), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfString))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfString);
	if (soap_out_PointerTons1__ArrayOfString(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfString(struct soap *soap, const char *tag, int id, ns1__ArrayOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfString(struct soap *soap, const char *tag, ns1__ArrayOfString **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfString **)soap_malloc(soap, sizeof(ns1__ArrayOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfString *)soap_instantiate_ns1__ArrayOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfString ** p = (ns1__ArrayOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfString, sizeof(ns1__ArrayOfString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ResourceData(struct soap *soap, std::vector<ns1__ResourceData * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ResourceData(struct soap *soap, const std::vector<ns1__ResourceData * >*a)
{
	for (std::vector<ns1__ResourceData * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ResourceData(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ResourceData(struct soap *soap, const char *tag, int id, const std::vector<ns1__ResourceData * >*a, const char *type)
{
	for (std::vector<ns1__ResourceData * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ResourceData(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ResourceData * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ResourceData(struct soap *soap, const char *tag, std::vector<ns1__ResourceData * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ResourceData(soap, -1)))
		return NULL;
	ns1__ResourceData *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ResourceData, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ResourceData, sizeof(ns1__ResourceData), 1))
				break;
			if (!soap_in_PointerTons1__ResourceData(soap, tag, NULL, "ns1:ResourceData"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons1__ResourceData(soap, tag, &n, "ns1:ResourceData"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns1__ResourceData * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons1__ResourceData(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons1__ResourceData(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons1__ResourceData(struct soap *soap, std::vector<ns1__ResourceData * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns1__ResourceData * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons1__ResourceData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ResourceData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ResourceData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns1__ResourceData * >;
		if (size)
			*size = sizeof(std::vector<ns1__ResourceData * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns1__ResourceData * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns1__ResourceData * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns1__ResourceData * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ResourceData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ResourceData * > %p -> %p\n", q, p));
	*(std::vector<ns1__ResourceData * >*)p = *(std::vector<ns1__ResourceData * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__SpringHashEntry(struct soap *soap, std::vector<ns1__SpringHashEntry * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__SpringHashEntry(struct soap *soap, const std::vector<ns1__SpringHashEntry * >*a)
{
	for (std::vector<ns1__SpringHashEntry * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__SpringHashEntry(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__SpringHashEntry(struct soap *soap, const char *tag, int id, const std::vector<ns1__SpringHashEntry * >*a, const char *type)
{
	for (std::vector<ns1__SpringHashEntry * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__SpringHashEntry(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__SpringHashEntry * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__SpringHashEntry(struct soap *soap, const char *tag, std::vector<ns1__SpringHashEntry * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__SpringHashEntry(soap, -1)))
		return NULL;
	ns1__SpringHashEntry *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__SpringHashEntry, SOAP_TYPE_std__vectorTemplateOfPointerTons1__SpringHashEntry, sizeof(ns1__SpringHashEntry), 1))
				break;
			if (!soap_in_PointerTons1__SpringHashEntry(soap, tag, NULL, "ns1:SpringHashEntry"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons1__SpringHashEntry(soap, tag, &n, "ns1:SpringHashEntry"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns1__SpringHashEntry * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons1__SpringHashEntry(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons1__SpringHashEntry(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons1__SpringHashEntry(struct soap *soap, std::vector<ns1__SpringHashEntry * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns1__SpringHashEntry * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons1__SpringHashEntry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__SpringHashEntry(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__SpringHashEntry, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns1__SpringHashEntry * >;
		if (size)
			*size = sizeof(std::vector<ns1__SpringHashEntry * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns1__SpringHashEntry * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns1__SpringHashEntry * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns1__SpringHashEntry * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__SpringHashEntry(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__SpringHashEntry * > %p -> %p\n", q, p));
	*(std::vector<ns1__SpringHashEntry * >*)p = *(std::vector<ns1__SpringHashEntry * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
		return NULL;
	std::string n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		soap_default_std__string(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{
			if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<std::string > * SOAP_FMAC6 soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<std::string > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<std::string >;
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)new std::vector<std::string >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<std::string >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

/* End of soapC.cpp */
