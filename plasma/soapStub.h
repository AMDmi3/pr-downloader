/* soapStub.h
   Generated by gSOAP 2.7.9l from plasma.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns1__ReturnValue
#define SOAP_TYPE_ns1__ReturnValue (28)
/* ns1:ReturnValue */
enum ns1__ReturnValue {ns1__ReturnValue__Ok = 0, ns1__ReturnValue__InvalidLogin = 1, ns1__ReturnValue__ResourceNotFound = 2, ns1__ReturnValue__InternalNameAlreadyExistsWithDifferentSpringHash = 3, ns1__ReturnValue__Md5AlreadyExists = 4, ns1__ReturnValue__Md5AlreadyExistsWithDifferentName = 5};
#endif

#ifndef SOAP_TYPE_ns1__ResourceType
#define SOAP_TYPE_ns1__ResourceType (29)
/* ns1:ResourceType */
enum ns1__ResourceType {ns1__ResourceType__Map = 0, ns1__ResourceType__Mod = 1};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/




#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (7)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() : __ptr(NULL), __size(0), id(NULL), type(NULL), options(NULL), soap(NULL) { }
	virtual ~xsd__base64Binary() { }
};
#endif

#if 0 /* volatile type: do not redeclare */

#endif

#ifndef SOAP_TYPE_ns1__ArrayOfString
#define SOAP_TYPE_ns1__ArrayOfString (13)
/* ns1:ArrayOfString */
class SOAP_CMAC ns1__ArrayOfString
{
public:
	std::vector<std::string >string;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns1__ArrayOfString */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfString() : soap(NULL) { }
	virtual ~ns1__ArrayOfString() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourceData
#define SOAP_TYPE_ns1__ResourceData (14)
/* ns1:ResourceData */
class SOAP_CMAC ns1__ResourceData
{
public:
	ns1__ArrayOfString *Dependencies;	/* optional element of type ns1:ArrayOfString */
	std::string *InternalName;	/* optional element of type xsd:string */
	enum ns1__ResourceType ResourceType;	/* required element of type ns1:ResourceType */
	class ns1__ArrayOfSpringHashEntry *SpringHashes;	/* optional element of type ns1:ArrayOfSpringHashEntry */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns1__ResourceData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourceData() : Dependencies(NULL), InternalName(NULL), ResourceType((enum ns1__ResourceType)0), SpringHashes(NULL), soap(NULL) { }
	virtual ~ns1__ResourceData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSpringHashEntry
#define SOAP_TYPE_ns1__ArrayOfSpringHashEntry (15)
/* ns1:ArrayOfSpringHashEntry */
class SOAP_CMAC ns1__ArrayOfSpringHashEntry
{
public:
	std::vector<class ns1__SpringHashEntry * >SpringHashEntry;	/* optional element of type ns1:SpringHashEntry */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns1__ArrayOfSpringHashEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSpringHashEntry() : soap(NULL) { }
	virtual ~ns1__ArrayOfSpringHashEntry() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SpringHashEntry
#define SOAP_TYPE_ns1__SpringHashEntry (16)
/* ns1:SpringHashEntry */
class SOAP_CMAC ns1__SpringHashEntry
{
public:
	int SpringHash;	/* required element of type xsd:int */
	std::string *SpringVersion;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns1__SpringHashEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SpringHashEntry() : SpringHash(0), SpringVersion(NULL), soap(NULL) { }
	virtual ~ns1__SpringHashEntry() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfResourceData
#define SOAP_TYPE_ns1__ArrayOfResourceData (17)
/* ns1:ArrayOfResourceData */
class SOAP_CMAC ns1__ArrayOfResourceData
{
public:
	std::vector<ns1__ResourceData * >ResourceData;	/* optional element of type ns1:ResourceData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns1__ArrayOfResourceData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfResourceData() : soap(NULL) { }
	virtual ~ns1__ArrayOfResourceData() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteResource
#define SOAP_TYPE__ns1__DeleteResource (18)
/* ns1:DeleteResource */
class SOAP_CMAC _ns1__DeleteResource
{
public:
	std::string *login;	/* optional element of type xsd:string */
	std::string *password;	/* optional element of type xsd:string */
	std::string *internalName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__ns1__DeleteResource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteResource() : login(NULL), password(NULL), internalName(NULL), soap(NULL) { }
	virtual ~_ns1__DeleteResource() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteResourceResponse
#define SOAP_TYPE__ns1__DeleteResourceResponse (19)
/* ns1:DeleteResourceResponse */
class SOAP_CMAC _ns1__DeleteResourceResponse
{
public:
	enum ns1__ReturnValue DeleteResourceResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ReturnValue */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__ns1__DeleteResourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteResourceResponse() : DeleteResourceResult((enum ns1__ReturnValue)0), soap(NULL) { }
	virtual ~_ns1__DeleteResourceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DownloadFile
#define SOAP_TYPE__ns1__DownloadFile (20)
/* ns1:DownloadFile */
class SOAP_CMAC _ns1__DownloadFile
{
public:
	std::string *internalName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE__ns1__DownloadFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DownloadFile() : internalName(NULL), soap(NULL) { }
	virtual ~_ns1__DownloadFile() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DownloadFileResponse
#define SOAP_TYPE__ns1__DownloadFileResponse (21)
/* ns1:DownloadFileResponse */
class SOAP_CMAC _ns1__DownloadFileResponse
{
public:
	bool DownloadFileResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	ns1__ArrayOfString *links;	/* optional element of type ns1:ArrayOfString */
	xsd__base64Binary *torrent;	/* optional element of type xsd:base64Binary */
	ns1__ArrayOfString *dependencies;	/* optional element of type ns1:ArrayOfString */
	enum ns1__ResourceType resourceType;	/* required element of type ns1:ResourceType */
	std::string *torrentFileName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE__ns1__DownloadFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DownloadFileResponse() : DownloadFileResult((bool)0), links(NULL), torrent(NULL), dependencies(NULL), resourceType((enum ns1__ResourceType)0), torrentFileName(NULL), soap(NULL) { }
	virtual ~_ns1__DownloadFileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetResourceData
#define SOAP_TYPE__ns1__GetResourceData (22)
/* ns1:GetResourceData */
class SOAP_CMAC _ns1__GetResourceData
{
public:
	std::string *md5;	/* optional element of type xsd:string */
	std::string *internalName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__ns1__GetResourceData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetResourceData() : md5(NULL), internalName(NULL), soap(NULL) { }
	virtual ~_ns1__GetResourceData() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetResourceDataResponse
#define SOAP_TYPE__ns1__GetResourceDataResponse (23)
/* ns1:GetResourceDataResponse */
class SOAP_CMAC _ns1__GetResourceDataResponse
{
public:
	ns1__ResourceData *GetResourceDataResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ResourceData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__ns1__GetResourceDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetResourceDataResponse() : GetResourceDataResult(NULL), soap(NULL) { }
	virtual ~_ns1__GetResourceDataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetResourceList
#define SOAP_TYPE__ns1__GetResourceList (24)
/* ns1:GetResourceList */
class SOAP_CMAC _ns1__GetResourceList
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__ns1__GetResourceList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetResourceList() : soap(NULL) { }
	virtual ~_ns1__GetResourceList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetResourceListResponse
#define SOAP_TYPE__ns1__GetResourceListResponse (25)
/* ns1:GetResourceListResponse */
class SOAP_CMAC _ns1__GetResourceListResponse
{
public:
	ns1__ArrayOfResourceData *GetResourceListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfResourceData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__ns1__GetResourceListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetResourceListResponse() : GetResourceListResult(NULL), soap(NULL) { }
	virtual ~_ns1__GetResourceListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RegisterResource
#define SOAP_TYPE__ns1__RegisterResource (26)
/* ns1:RegisterResource */
class SOAP_CMAC _ns1__RegisterResource
{
public:
	int apiVersion;	/* required element of type xsd:int */
	std::string *springVersion;	/* optional element of type xsd:string */
	std::string *md5;	/* optional element of type xsd:string */
	int length;	/* required element of type xsd:int */
	enum ns1__ResourceType resourceType;	/* required element of type ns1:ResourceType */
	std::string *archiveName;	/* optional element of type xsd:string */
	std::string *internalName;	/* optional element of type xsd:string */
	int springHash;	/* required element of type xsd:int */
	xsd__base64Binary *serializedData;	/* optional element of type xsd:base64Binary */
	ns1__ArrayOfString *dependencies;	/* optional element of type ns1:ArrayOfString */
	xsd__base64Binary *minimap;	/* optional element of type xsd:base64Binary */
	xsd__base64Binary *metalMap;	/* optional element of type xsd:base64Binary */
	xsd__base64Binary *heightMap;	/* optional element of type xsd:base64Binary */
	xsd__base64Binary *torrentData;	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns1__RegisterResource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RegisterResource() : apiVersion(0), springVersion(NULL), md5(NULL), length(0), resourceType((enum ns1__ResourceType)0), archiveName(NULL), internalName(NULL), springHash(0), serializedData(NULL), dependencies(NULL), minimap(NULL), metalMap(NULL), heightMap(NULL), torrentData(NULL), soap(NULL) { }
	virtual ~_ns1__RegisterResource() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RegisterResourceResponse
#define SOAP_TYPE__ns1__RegisterResourceResponse (27)
/* ns1:RegisterResourceResponse */
class SOAP_CMAC _ns1__RegisterResourceResponse
{
public:
	enum ns1__ReturnValue RegisterResourceResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ReturnValue */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__ns1__RegisterResourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RegisterResourceResponse() : RegisterResourceResult((enum ns1__ReturnValue)0), soap(NULL) { }
	virtual ~_ns1__RegisterResourceResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns2__DeleteResource
#define SOAP_TYPE___ns2__DeleteResource (45)
/* Operation wrapper: */
struct __ns2__DeleteResource
{
public:
	_ns1__DeleteResource *ns1__DeleteResource;	/* optional element of type ns1:DeleteResource */
};
#endif

#ifndef SOAP_TYPE___ns2__DownloadFile
#define SOAP_TYPE___ns2__DownloadFile (49)
/* Operation wrapper: */
struct __ns2__DownloadFile
{
public:
	_ns1__DownloadFile *ns1__DownloadFile;	/* optional element of type ns1:DownloadFile */
};
#endif

#ifndef SOAP_TYPE___ns2__GetResourceData
#define SOAP_TYPE___ns2__GetResourceData (53)
/* Operation wrapper: */
struct __ns2__GetResourceData
{
public:
	_ns1__GetResourceData *ns1__GetResourceData;	/* optional element of type ns1:GetResourceData */
};
#endif

#ifndef SOAP_TYPE___ns2__GetResourceList
#define SOAP_TYPE___ns2__GetResourceList (57)
/* Operation wrapper: */
struct __ns2__GetResourceList
{
public:
	_ns1__GetResourceList *ns1__GetResourceList;	/* optional element of type ns1:GetResourceList */
};
#endif

#ifndef SOAP_TYPE___ns2__RegisterResource
#define SOAP_TYPE___ns2__RegisterResource (61)
/* Operation wrapper: */
struct __ns2__RegisterResource
{
public:
	_ns1__RegisterResource *ns1__RegisterResource;	/* optional element of type ns1:RegisterResource */
};
#endif

#ifndef SOAP_TYPE___ns3__DeleteResource
#define SOAP_TYPE___ns3__DeleteResource (63)
/* Operation wrapper: */
struct __ns3__DeleteResource
{
public:
	_ns1__DeleteResource *ns1__DeleteResource;	/* optional element of type ns1:DeleteResource */
};
#endif

#ifndef SOAP_TYPE___ns3__DownloadFile
#define SOAP_TYPE___ns3__DownloadFile (65)
/* Operation wrapper: */
struct __ns3__DownloadFile
{
public:
	_ns1__DownloadFile *ns1__DownloadFile;	/* optional element of type ns1:DownloadFile */
};
#endif

#ifndef SOAP_TYPE___ns3__GetResourceData
#define SOAP_TYPE___ns3__GetResourceData (67)
/* Operation wrapper: */
struct __ns3__GetResourceData
{
public:
	_ns1__GetResourceData *ns1__GetResourceData;	/* optional element of type ns1:GetResourceData */
};
#endif

#ifndef SOAP_TYPE___ns3__GetResourceList
#define SOAP_TYPE___ns3__GetResourceList (69)
/* Operation wrapper: */
struct __ns3__GetResourceList
{
public:
	_ns1__GetResourceList *ns1__GetResourceList;	/* optional element of type ns1:GetResourceList */
};
#endif

#ifndef SOAP_TYPE___ns3__RegisterResource
#define SOAP_TYPE___ns3__RegisterResource (71)
/* Operation wrapper: */
struct __ns3__RegisterResource
{
public:
	_ns1__RegisterResource *ns1__RegisterResource;	/* optional element of type ns1:RegisterResource */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (72)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (73)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (75)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (78)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (79)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
