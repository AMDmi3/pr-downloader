/* soapContentServiceSoap12Proxy.cpp
   Generated by gSOAP 2.7.9l from plasma.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapContentServiceSoap12Proxy.h"

ContentServiceSoap12Proxy::ContentServiceSoap12Proxy()
{	ContentServiceSoap12Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ContentServiceSoap12Proxy::ContentServiceSoap12Proxy(soap_mode iomode)
{	ContentServiceSoap12Proxy_init(iomode, iomode);
}

ContentServiceSoap12Proxy::ContentServiceSoap12Proxy(soap_mode imode, soap_mode omode)
{	ContentServiceSoap12Proxy_init(imode, omode);
}

void ContentServiceSoap12Proxy::ContentServiceSoap12Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "http://tempuri.org/ContentServiceSoap", NULL, NULL},
	{"ns1", "http://tempuri.org/", NULL, NULL},
	{"ns3", "http://tempuri.org/ContentServiceSoap12", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

ContentServiceSoap12Proxy::~ContentServiceSoap12Proxy()
{ }

void ContentServiceSoap12Proxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *ContentServiceSoap12Proxy::soap_fault()
{	return this->fault;
}

const char *ContentServiceSoap12Proxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *ContentServiceSoap12Proxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int ContentServiceSoap12Proxy::DownloadFile(_ns1__DownloadFile *ns1__DownloadFile, _ns1__DownloadFileResponse *ns1__DownloadFileResponse)
{	struct soap *soap = this;
	struct __ns3__DownloadFile soap_tmp___ns3__DownloadFile;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://zero-k.info/ContentService.asmx";
	soap_action = "http://tempuri.org/DownloadFile";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DownloadFile.ns1__DownloadFile = ns1__DownloadFile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DownloadFile(soap, &soap_tmp___ns3__DownloadFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DownloadFile(soap, &soap_tmp___ns3__DownloadFile, "-ns3:DownloadFile", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DownloadFile(soap, &soap_tmp___ns3__DownloadFile, "-ns3:DownloadFile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadFileResponse)
		return soap_closesock(soap);
	ns1__DownloadFileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadFileResponse->soap_get(soap, "ns1:DownloadFileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ContentServiceSoap12Proxy::GetResourceData(_ns1__GetResourceData *ns1__GetResourceData, _ns1__GetResourceDataResponse *ns1__GetResourceDataResponse)
{	struct soap *soap = this;
	struct __ns3__GetResourceData soap_tmp___ns3__GetResourceData;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://zero-k.info/ContentService.asmx";
	soap_action = "http://tempuri.org/GetResourceData";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__GetResourceData.ns1__GetResourceData = ns1__GetResourceData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__GetResourceData(soap, &soap_tmp___ns3__GetResourceData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetResourceData(soap, &soap_tmp___ns3__GetResourceData, "-ns3:GetResourceData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetResourceData(soap, &soap_tmp___ns3__GetResourceData, "-ns3:GetResourceData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetResourceDataResponse)
		return soap_closesock(soap);
	ns1__GetResourceDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetResourceDataResponse->soap_get(soap, "ns1:GetResourceDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ContentServiceSoap12Proxy::GetResourceList(_ns1__GetResourceList *ns1__GetResourceList, _ns1__GetResourceListResponse *ns1__GetResourceListResponse)
{	struct soap *soap = this;
	struct __ns3__GetResourceList soap_tmp___ns3__GetResourceList;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://zero-k.info/ContentService.asmx";
	soap_action = "http://tempuri.org/GetResourceList";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__GetResourceList.ns1__GetResourceList = ns1__GetResourceList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__GetResourceList(soap, &soap_tmp___ns3__GetResourceList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetResourceList(soap, &soap_tmp___ns3__GetResourceList, "-ns3:GetResourceList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetResourceList(soap, &soap_tmp___ns3__GetResourceList, "-ns3:GetResourceList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetResourceListResponse)
		return soap_closesock(soap);
	ns1__GetResourceListResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetResourceListResponse->soap_get(soap, "ns1:GetResourceListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ContentServiceSoap12Proxy::GetScriptMissionData(_ns1__GetScriptMissionData *ns1__GetScriptMissionData, _ns1__GetScriptMissionDataResponse *ns1__GetScriptMissionDataResponse)
{	struct soap *soap = this;
	struct __ns3__GetScriptMissionData soap_tmp___ns3__GetScriptMissionData;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://zero-k.info/ContentService.asmx";
	soap_action = "http://tempuri.org/GetScriptMissionData";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__GetScriptMissionData.ns1__GetScriptMissionData = ns1__GetScriptMissionData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__GetScriptMissionData(soap, &soap_tmp___ns3__GetScriptMissionData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetScriptMissionData(soap, &soap_tmp___ns3__GetScriptMissionData, "-ns3:GetScriptMissionData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetScriptMissionData(soap, &soap_tmp___ns3__GetScriptMissionData, "-ns3:GetScriptMissionData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetScriptMissionDataResponse)
		return soap_closesock(soap);
	ns1__GetScriptMissionDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetScriptMissionDataResponse->soap_get(soap, "ns1:GetScriptMissionDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ContentServiceSoap12Proxy::NotifyMissionRun(_ns1__NotifyMissionRun *ns1__NotifyMissionRun, _ns1__NotifyMissionRunResponse *ns1__NotifyMissionRunResponse)
{	struct soap *soap = this;
	struct __ns3__NotifyMissionRun soap_tmp___ns3__NotifyMissionRun;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://zero-k.info/ContentService.asmx";
	soap_action = "http://tempuri.org/NotifyMissionRun";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__NotifyMissionRun.ns1__NotifyMissionRun = ns1__NotifyMissionRun;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__NotifyMissionRun(soap, &soap_tmp___ns3__NotifyMissionRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__NotifyMissionRun(soap, &soap_tmp___ns3__NotifyMissionRun, "-ns3:NotifyMissionRun", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__NotifyMissionRun(soap, &soap_tmp___ns3__NotifyMissionRun, "-ns3:NotifyMissionRun", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__NotifyMissionRunResponse)
		return soap_closesock(soap);
	ns1__NotifyMissionRunResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__NotifyMissionRunResponse->soap_get(soap, "ns1:NotifyMissionRunResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ContentServiceSoap12Proxy::RegisterResource(_ns1__RegisterResource *ns1__RegisterResource, _ns1__RegisterResourceResponse *ns1__RegisterResourceResponse)
{	struct soap *soap = this;
	struct __ns3__RegisterResource soap_tmp___ns3__RegisterResource;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://zero-k.info/ContentService.asmx";
	soap_action = "http://tempuri.org/RegisterResource";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__RegisterResource.ns1__RegisterResource = ns1__RegisterResource;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__RegisterResource(soap, &soap_tmp___ns3__RegisterResource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__RegisterResource(soap, &soap_tmp___ns3__RegisterResource, "-ns3:RegisterResource", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__RegisterResource(soap, &soap_tmp___ns3__RegisterResource, "-ns3:RegisterResource", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RegisterResourceResponse)
		return soap_closesock(soap);
	ns1__RegisterResourceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RegisterResourceResponse->soap_get(soap, "ns1:RegisterResourceResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ContentServiceSoap12Proxy::SubmitMissionScore(_ns1__SubmitMissionScore *ns1__SubmitMissionScore, _ns1__SubmitMissionScoreResponse *ns1__SubmitMissionScoreResponse)
{	struct soap *soap = this;
	struct __ns3__SubmitMissionScore soap_tmp___ns3__SubmitMissionScore;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://zero-k.info/ContentService.asmx";
	soap_action = "http://tempuri.org/SubmitMissionScore";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__SubmitMissionScore.ns1__SubmitMissionScore = ns1__SubmitMissionScore;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__SubmitMissionScore(soap, &soap_tmp___ns3__SubmitMissionScore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__SubmitMissionScore(soap, &soap_tmp___ns3__SubmitMissionScore, "-ns3:SubmitMissionScore", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__SubmitMissionScore(soap, &soap_tmp___ns3__SubmitMissionScore, "-ns3:SubmitMissionScore", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SubmitMissionScoreResponse)
		return soap_closesock(soap);
	ns1__SubmitMissionScoreResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SubmitMissionScoreResponse->soap_get(soap, "ns1:SubmitMissionScoreResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ContentServiceSoap12Proxy::SubmitStackTrace(_ns1__SubmitStackTrace *ns1__SubmitStackTrace, _ns1__SubmitStackTraceResponse *ns1__SubmitStackTraceResponse)
{	struct soap *soap = this;
	struct __ns3__SubmitStackTrace soap_tmp___ns3__SubmitStackTrace;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://zero-k.info/ContentService.asmx";
	soap_action = "http://tempuri.org/SubmitStackTrace";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__SubmitStackTrace.ns1__SubmitStackTrace = ns1__SubmitStackTrace;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__SubmitStackTrace(soap, &soap_tmp___ns3__SubmitStackTrace);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__SubmitStackTrace(soap, &soap_tmp___ns3__SubmitStackTrace, "-ns3:SubmitStackTrace", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__SubmitStackTrace(soap, &soap_tmp___ns3__SubmitStackTrace, "-ns3:SubmitStackTrace", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SubmitStackTraceResponse)
		return soap_closesock(soap);
	ns1__SubmitStackTraceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SubmitStackTraceResponse->soap_get(soap, "ns1:SubmitStackTraceResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
